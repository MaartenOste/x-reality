{"version":3,"sources":["App/utils/Convert/index.js","App/components/Gauge/index.js","App/components/Lighting/index.js","App/index.js","index.js","App/components/GlTransmissionFormat/glTF.glb","App/components/Suzanne/suzanne.glb"],"names":["degrees","Math","PI","props","tickMarks","color","label","angleStep","length","needleRef","useRef","needleStep","needleValue","needleAngle","useFrame","Convert","toRadians","current","rotation","z","map","value","index","radians","position","attach","args","metalness","opacity","roughness","transparent","ref","light","intensity","io","Gauge","Lighting","enablePan","enableZoom","enableRotate","ReactDOM","render","App","document","getElementById","module","exports"],"mappings":"2VACmBA,GACf,OAAQC,KAAKC,GAAK,IAAOF,M,KCGd,WAACG,GACd,IAAMC,EAAY,CAChB,CAAEC,MAAO,QAASC,MAAO,KACzB,CAAED,MAAO,QAASC,MAAO,MACzB,CAAED,MAAO,QAASC,MAAO,MACzB,CAAED,MAAO,QAASC,MAAO,MACzB,CAAED,MAAO,QAASC,MAAO,MACzB,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,MAAOC,MAAO,MACvB,CAAED,MAAO,MAAOC,MAAO,OAGnBC,EADa,KACaH,EAAUI,OAAS,GAE7CC,EAAYC,mBAGdC,EAFiB,GAGjBC,EAAc,EACdC,EAAc,EAgBlB,OAdAC,aAAS,WACHF,GAAe,EACjBD,EARiB,GASR,KAAQP,EAAUI,OAAS,IAAMI,IAC1CD,GATmB,KAWrBC,GAAeD,EAEfE,EAAcE,EAAQC,WAhBL,IAFA,KAmBa,KAAQZ,EAAUI,OAAS,IAAOI,GAEhEH,EAAUQ,QAAQC,SAASC,EAAIN,KAI/B,yBAAUV,EACPC,EAAUgB,KAAI,SAACC,EAAOC,GACrB,IAAMC,EAAUR,EAAQC,WAzBX,IAyBkCT,EAAYe,GAC3D,OACE,0BAAMJ,SAAU,CAAC,EAAG,EAAGK,IACrB,0BAAMC,SAAU,CAAC,EAAG,EAAG,IACrB,uCAAmBC,OAAO,WAAWC,KAAM,CAAC,IAAM,IAAM,OACxD,0CACED,OAAO,WACPpB,MAAOgB,EAAMhB,MACbsB,UAAW,GACXC,QAAS,GACTC,UAAW,GACXC,aAAa,SAOvB,0BAAMN,SAAU,CAAC,EAAG,EAAG,KACrB,0BAAMO,IAAKtB,GACT,0BAAMe,SAAU,CAAC,GAAK,EAAG,IACvB,uCAAmBE,KAAM,CAAC,EAAG,IAAM,KAAOD,OAAO,aACjD,0CACEA,OAAO,WAEPE,UAAW,GACXC,QAAS,EACTC,UAAW,GACXC,aAAa,MAInB,8BACE,0BAAMZ,SAAU,CAACH,EAAQC,UAAU,IAAK,EAAG,IACzC,4CACEU,KAAM,CAAC,GAAK,GAAK,IAAM,IACvBD,OAAO,aAET,0CACEA,OAAO,WACPG,QAAS,EACTE,aAAa,OAKrB,0BAAMN,SAAU,CAAC,EAAG,GAAI,IAAMN,SAAU,CAACH,EAAQC,UAAU,IAAK,EAAG,IACjE,4CAAwBU,KAAM,CAAC,IAAK,IAAK,IAAM,IAAKD,OAAO,aAC3D,0CACEA,OAAO,WACPG,QAAS,IACTE,aAAa,OC5FR,G,WAAA,WACb,IAAME,EAAQtB,mBAEd,OACE,oCACE,kCAAcuB,UAAW,KACzB,sCAAkBF,IAAKC,EAAOR,SAAU,CAAC,GAAI,GAAI,GAAIS,UAAW,IAFlE,IAGE,gCAAYA,UAAW,KAAMT,SAAU,CAAC,EAAG,EAAG,QCMrC,G,aAAA,WAEEU,IAAG,oBAAD,OADJ,OAeb,OAEE,kBAAC,IAAD,KAGE,kBAACC,EAAD,MAMA,kBAACC,EAAD,MACA,kBAAC,IAAD,CAAeC,WAAW,EAAMC,YAAY,EAAMC,cAAc,OCvCtEC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.e27d0a64.chunk.js","sourcesContent":["export default class {\r\n  static toRadians(degrees) {\r\n    return (Math.PI / 180) * degrees;\r\n  }\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nimport { Convert } from \"../../utils\";\r\n\r\nexport default (props) => {\r\n  const tickMarks = [\r\n    { color: \"green\", label: \"0\" },\r\n    { color: \"white\", label: \"10\" },\r\n    { color: \"white\", label: \"20\" },\r\n    { color: \"white\", label: \"30\" },\r\n    { color: \"white\", label: \"40\" },\r\n    { color: \"orange\", label: \"50\" },\r\n    { color: \"red\", label: \"60\" },\r\n    { color: \"red\", label: \"70\" },\r\n  ];\r\n  const angleRange = 270;\r\n  const angleStep = angleRange / (tickMarks.length - 1);\r\n  const startAngle = -(360 - angleRange) * 1.5;\r\n  const needleRef = useRef();\r\n  const needleStepUp = 40;\r\n  const needleStepDown = -200;\r\n  let needleStep = needleStepUp;\r\n  let needleValue = 0;\r\n  let needleAngle = 0;\r\n\r\n  useFrame(() => {\r\n    if (needleValue <= 0) {\r\n      needleStep = needleStepUp;\r\n    } else if (1000 * (tickMarks.length - 1) <= needleValue) {\r\n      needleStep = needleStepDown;\r\n    }\r\n    needleValue += needleStep;\r\n\r\n    needleAngle = Convert.toRadians(\r\n      startAngle - (angleRange / (1000 * (tickMarks.length - 1))) * needleValue\r\n    );\r\n    needleRef.current.rotation.z = needleAngle;\r\n  });\r\n\r\n  return (\r\n    <mesh {...props}>\r\n      {tickMarks.map((value, index) => {\r\n        const radians = Convert.toRadians(startAngle - angleStep * index);\r\n        return (\r\n          <mesh rotation={[0, 0, radians]}>\r\n            <mesh position={[1, 0, 0]}>\r\n              <boxBufferGeometry attach=\"geometry\" args={[0.25, 0.05, 0.05]} />\r\n              <meshStandardMaterial\r\n                attach=\"material\"\r\n                color={value.color}\r\n                metalness={0.1}\r\n                opacity={0.5}\r\n                roughness={0.6}\r\n                transparent={true}\r\n              />\r\n            </mesh>\r\n          </mesh>\r\n        );\r\n      })}\r\n\r\n      <mesh position={[0, 0, 0.1]}>\r\n        <mesh ref={needleRef}>\r\n          <mesh position={[0.5, 0, 0]}>\r\n            <boxBufferGeometry args={[1, 0.05, 0.05]} attach=\"geometry\" />\r\n            <meshStandardMaterial\r\n              attach=\"material\"\r\n              // color={color}\r\n              metalness={0.1}\r\n              opacity={1}\r\n              roughness={0.6}\r\n              transparent={true}\r\n            />\r\n          </mesh>\r\n        </mesh>\r\n        <mesh>\r\n          <mesh rotation={[Convert.toRadians(90), 0, 0]}>\r\n            <cylinderBufferGeometry\r\n              args={[0.1, 0.1, 0.05, 32]}\r\n              attach=\"geometry\"\r\n            />\r\n            <meshStandardMaterial\r\n              attach=\"material\"\r\n              opacity={1}\r\n              transparent={true}\r\n            />\r\n          </mesh>\r\n        </mesh>\r\n      </mesh>\r\n      <mesh position={[0, 0, -0.1]} rotation={[Convert.toRadians(90), 0, 0]}>\r\n        <cylinderBufferGeometry args={[1.2, 1.2, 0.05, 64]} attach=\"geometry\" />\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          opacity={0.25}\r\n          transparent={true}\r\n        />\r\n      </mesh>\r\n    </mesh>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\n\r\nexport default () => {\r\n  const light = useRef();\r\n\r\n  return (\r\n    <>\r\n      <ambientLight intensity={0.9} />\r\n      <directionalLight ref={light} position={[10, 10, 5]} intensity={1} />;\r\n      <pointLight intensity={1.12} position={[0, 0, 0]} />\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { OrbitControls } from \"drei\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport {\r\n  Cube,\r\n  Gauge,\r\n  GlTransmissionFormat,\r\n  Lighting,\r\n  Suzanne,\r\n  Tripod,\r\n} from \"./components\";\r\nimport \"./styles.css\";\r\n\r\nexport default () => {\r\n  const port = 3001;\r\n  const socket = io(`http://localhost:${port}`);\r\n\r\n  // socket.on(\"connect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"disconnect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"telemetry\", (message) => {\r\n  //   console.log(\"Message:\", message);\r\n  // });\r\n\r\n  return (\r\n    // <Canvas invalidateFrameloop>\r\n    <Canvas>\r\n      {/* <Cube />\r\n      <Cube position={[1, 1, 1]} rotation={[0.5, 0.5, 0.5]} /> */}\r\n      <Gauge />\r\n      {/* <Tripod /> */}\r\n      {/* <Suspense fallback={null}>\r\n        <Suzanne />\r\n        <GlTransmissionFormat />\r\n      </Suspense> */}\r\n      <Lighting />\r\n      <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\r\n    </Canvas>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/glTF.ce019e05.glb\";","module.exports = __webpack_public_path__ + \"static/media/suzanne.fdd60495.glb\";"],"sourceRoot":""}