{"version":3,"sources":["App/components/GlTransmissionFormat/glTF.glb","App/components/Button/index.js","App/components/Button/Spring.js","App/utils/MathCircle/index.js","App/components/Clock/index.js","App/components/Cube/index.js","App/components/Gauge/index.js","App/components/GlTransmissionFormat/index.js","App/components/Lighting/index.js","App/components/Lighting/Gui.js","App/components/Lighting/Studio.js","App/components/Lighting/StudioGui.js","App/components/Lighting/ThreePoint.js","App/components/Lighting/ThreePointGui.js","App/components/Suzanne/index.js","App/components/Suzanne/MatcapTexture.js","App/components/Suzanne/StandardMaterial.js","App/components/Tripod/index.js","App/Content.js","App/index.js","index.js","App/components/Suzanne/suzanne.glb"],"names":["module","exports","props","useState","setHover","color","setColor","useFrame","onClick","onDoubleClick","onPointerOut","onPointerOver","args","fontSize","position","hover","toggle","setToggle","colorCurrent","setColorCurrent","useSpring","opacity","scale","rotation","THREE","degToRad","group","mesh","meshMatcapMaterial","transparent","radius","this","degrees","angle","x","Math","cos","y","sin","CLOCK","useRef","HAND_SS","HAND_MM","HAND_HH","angleStart","d","Date","current","z","getSeconds","getMinutes","getHours","ref","Array","fill","map","value","index","MathCircle","getCoordinates","toString","receiveShadow","castShadow","radians","key","metalness","roughness","colors","floor","random","length","cubeRef","console","log","TICK_MARKS","label","angleStep","valueRange","valueStep","needleRef","needleAngle","needleValue","needleStep","forEach","tickMark","children","material","setColorName","clockwise","setClockwise","gltf","useGLTF","logo","logoRef","object","scene","intensity","directionalLightRef","useResource","hemisphereLightRef","pointLightRef","spotLightRef","showLightHelpers","useControl","type","ambientLightIntensity","min","max","pointLightColor","pointLightPosition","distance","spotLightColor","frontLightRef","leftLightRef","rightLightRef","ambientLightColor","frontLightColor","frontLightIntensity","leftLightColor","leftLightIntensity","rightLightColor","rightLightIntensity","backLightRef","fillLightRef","keyLightRef","backLightColor","fillLightColor","keyLightColor","rotate","setRotate","suzanne","nodes","materials","objectRef","geometry","Suzanne","suzanneRef","useSubdivision","useMatcapTexture","matcap","v","i","components","lightings","showEffect","showStats","showAxesHelper","showGridHelper","useLighting","items","useComponent","showLighting","name","showComponent","enablePan","enableRotate","enableZoom","height","luminanceThreshold","luminanceSmoothing","Lighting","Button","Clock","Cube","Gauge","fallback","GlTransmissionFormat","Tripod","invalidateFrameloop","shadowMap","Content","title","ReactDOM","render","App","document","getElementById"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,gLCI5B,WAACC,GAAW,IAAD,EACEC,oBAAS,GADX,mBACVC,GADU,aAEED,mBAAS,OAFX,mBAEjBE,EAFiB,KAEVC,EAFU,KAMxB,OAFAC,aAAS,eAGP,2BACEC,QAAS,kBAAMF,EAAS,WACxBG,cAAe,kBAAMH,EAAS,MAC9BI,aAAc,kBAAMN,GAAS,IAC7BO,cAAe,kBAAMP,GAAS,KAE9B,8BACE,uCAAmBQ,KAAc,CAAC,EAAG,GAAK,OAC1C,wCAAoBP,MAAOA,KAE7B,kBAAC,IAAD,CAAMA,MAAM,QAAQQ,SAAU,GAAKC,SAAU,CAAC,EAAG,EAAG,MAApD,e,eCfS,WAACZ,GAAW,IAAD,EACEC,oBAAS,GADX,mBACjBY,EADiB,KACVX,EADU,OAEID,oBAAS,GAFb,mBAEjBa,EAFiB,KAETC,EAFS,OAGgBd,mBAAS,UAHzB,mBAGjBe,EAHiB,KAGHC,EAHG,OAIaC,YAAU,CAC7CC,QAASN,EAAQ,EAAI,GACrBO,MAAOP,EAAQ,CAAC,IAAK,MAAQ,CAAC,EAAG,GACjCQ,SAAUP,EAAS,CAACQ,YAAgBC,UAAU,IAAK,EAAG,GAAK,CAAC,EAAG,EAAG,KAH5DJ,EAJgB,EAIhBA,QAASE,EAJO,EAIPA,SAAUD,EAJH,EAIGA,MAQ3B,OAFAf,aAAS,eAGP,kBAAC,IAASmB,MAAV,iBACMxB,EADN,CAEEM,QAAS,kBAAMS,GAAWD,IAC1BP,cAAe,kBAAMU,EAAgBD,GAAgB,IACrDR,aAAc,kBAAMN,GAAS,IAC7BO,cAAe,kBAAMP,GAAS,IAC9BmB,SAAUA,IAEV,kBAAC,IAASI,KAAV,CAAeL,MAAOA,GACpB,yCAAqBV,KAAM,CAAC,EAAG,MAC/B,kBAAC,IAASgB,mBAAV,CACEP,QAASA,EACThB,MAAOa,EACPW,aAAa,KAGjB,kBAAC,IAAD,CAAMxB,MAAM,QAAQQ,SAAU,GAAKC,SAAU,CAAC,EAAG,EAAG,MAApD,e,2BChCJ,WAAYgB,GAAS,oBACnBC,KAAKD,OAASA,E,2DAEDE,GACb,IAAMC,EAAQT,YAAgBC,SAASO,GAGvC,MAAO,CAAEE,EAFCC,KAAKC,IAAIH,GAASF,KAAKD,OAErBO,EADFF,KAAKG,IAAIL,GAASF,KAAKD,Y,KCAtB,WAAC5B,GACd,IAIMqC,EAAQC,mBACRC,EAAUD,mBACVE,EAAUF,mBACVG,EAAUH,mBAEVI,EAAapB,YAAgBC,SAAS,IAkB5C,OAhBAlB,aAAS,WACP,IAAMsC,EAAI,IAAIC,KAIdL,EAAQM,QAAQxB,SAASyB,EAAIxB,YAAgBC,UACzB,EAAlBoB,EAAEI,cAEJP,EAAQK,QAAQxB,SAASyB,EAAIxB,YAAgBC,UACzB,EAAlBoB,EAAEK,cAEJP,EAAQI,QAAQxB,SAASyB,EAAIxB,YAAgBC,UACH,IAAvCoB,EAAEM,WAAaN,EAAEK,aAtBX,QA2BT,2BAAOE,IAAKb,GAEV,+BACE,kBAAC,IAAD,CAAMlC,MAAM,QAAQS,SAAU,CAAC,GAAI,IAAM,MAAzC,uBAGCuC,MAlCI,IAmCFC,KAAK,MACLC,KAAI,SAACC,EAAOC,GACX,IACMxB,EAAa,GAALwB,EAAqB,GAFd,EACX,IAAIC,EAAW,KAENC,eAAe1B,GAA1BC,EAHa,EAGbA,EAAGG,EAHU,EAGVA,EACX,OACE,kBAAC,IAAD,CAAMhC,MAAM,QAAQS,SAAU,CAACoB,EAAGG,EAAG,OACjC,GAAKoB,GAAOG,gBAKxB,2CAAW1D,EAAX,CAAkBqB,SAAU,CAAC,EAAG,EAAGqB,KACjC,0BAAMiB,eAAe,GACnB,0CAAsBjD,KAAM,CAAC,IAAK,MAClC,0CAAsBS,QAAS,IAAMQ,aAAa,KAEpD,2BAAOf,SAAU,CAAC,EAAG,EAAG,KACtB,2BAAOsC,IAAKT,GACV,0BAAMmB,YAAY,EAAMhD,SAAU,CAAC,GAAK,EAAG,IACzC,uCAAmBF,KAAM,CAAC,GAAK,IAAM,OACrC,iDAGJ,2BAAOwC,IAAKV,GACV,0BAAMoB,YAAY,EAAMhD,SAAU,CAAC,GAAK,EAAG,IACzC,uCAAmBF,KAAM,CAAC,GAAK,IAAM,OACrC,iDAGJ,2BAAOwC,IAAKX,GACV,0BAAMqB,YAAY,EAAMhD,SAAU,CAAC,GAAK,EAAG,IACzC,uCAAmBF,KAAM,CAAC,EAAG,IAAM,OACnC,0CAAsBP,MAAO,cAIlCgD,MAvEI,IAwEFC,KAAK,MACLC,KAAI,SAACC,EAAOC,GACX,IAAMM,EAAUvC,YAAgBC,SAAU,EAAYgC,GACtD,OACE,2BAAOO,IAAKP,EAAOlC,SAAU,CAAC,EAAG,EAAGwC,IAClC,0BAAMjD,SAAU,CAAC,EAAG,EAAG,IACrB,uCACEF,KAAM,CACJ6C,EAAQ,EAAI,IAAO,IACnBA,EAAQ,EAAI,IAAO,IACnB,QAGJ,0CACEpD,MACY,IAAVoD,EAAc,IAAWA,EAAQ,EAAI,SAAW,SAElDQ,UAAW,GACX5C,QAAS,GACT6C,UAAW,GACXrC,aAAa,SAMzB,0BACEiC,YAAY,EACZvC,SAAU,CAACC,YAAgBC,UAAU,IAAK,EAAG,IAE7C,4CAAwBb,KAAM,CAAC,GAAK,IAAM,GAAK,MAC/C,mDC/GK,WAACV,GACd,IAAMiE,EAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAClD9D,EAAQ8D,EAAOhC,KAAKiC,MAAMjC,KAAKkC,SAAWF,EAAOG,SACjDC,EAAU/B,mBAHQ,EAIIrC,oBAAS,GAJb,mBAIjBa,EAJiB,KAITC,EAJS,KAKhBI,EAAYD,YAAU,CAC5BC,QAASL,EAAS,GAAM,KADlBK,QAGAP,EAAaM,YAAU,CAC7BN,SAAUE,EAAS,CAAC,EAAG,EAAG,GAKnB,CAA2B,GAAT,EAAhBmB,KAAKkC,SAAe,GAAkC,GAAT,EAAhBlC,KAAKkC,SAAe,GAAQ,KAN5DvD,SASR,OANA0D,QAAQC,IAAI3D,GAOV,kBAAC,IAASa,KAAV,iBACMzB,EADN,CAEEM,QAAS,kBAAMS,GAAWD,IAC1BF,SAAUA,IAEV,uCAAmBF,KAAM,CAAC,EAAG,EAAG,KAChC,kBAAC,IAASgB,mBAAV,CACEvB,MAAOA,EACPgB,QAASA,EACT+B,IAAKmB,EACL1C,aAAa,MCzBN,WAAC3B,GACd,IAAMwE,EAAa,CACjB,CAAErE,MAAO,QAASsE,MAAO,IAAKvB,IAAKZ,mBAAUgB,MAAO,GACpD,CAAEnD,MAAO,QAASsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACrD,CAAEnD,MAAO,QAASsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACrD,CAAEnD,MAAO,QAASsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACrD,CAAEnD,MAAO,QAASsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACrD,CAAEnD,MAAO,QAASsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACrD,CAAEnD,MAAO,SAAUsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACtD,CAAEnD,MAAO,MAAOsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,KACnD,CAAEnD,MAAO,MAAOsE,MAAO,KAAMvB,IAAKZ,mBAAUgB,MAAO,MAM/CoB,EAJc,KAIaF,EAAWJ,OAAS,GAC/C1B,EAAapB,YAAgBC,UAAU,KACvCoD,EAAuC,KAAzBH,EAAWJ,OAAS,GAClCQ,EAPc,IAOYD,EAC1BE,EAAYvC,mBACdwC,EAAc,EACdC,EAAc,EACdC,EATmB,GA4BvB,OAjBA3E,aAAS,WACH0E,GAAe,EACjBC,EAbmB,GAcVL,GAAcI,IACvBC,GAhBqB,KAkBvBD,GAAeC,EACfF,EAAcxD,YAAgBC,UAAWqD,EAAYG,GACrDF,EAAUhC,QAAQxB,SAASyB,EAAIgC,EAE/BN,EAAWS,SAAQ,SAACC,EAAU3B,GAC5B2B,EAAShC,IAAIL,QAAQsC,SAAS,GAAGC,SAASjF,MAAMkF,aAC9CH,EAAS5B,OAASyB,EAAc,OAASG,EAAS/E,aAMtD,2CAAWH,EAAX,CAAkBqB,SAAU,CAAC,EAAG,EAAGqB,KACjC,kBAAC,IAAD,CAAQhC,KAAM,CAAC,IAAK,IAAKE,SAAU,CAAC,EAAG,EAAG,GAAI+C,eAAe,GAC3D,0CAAsBxC,QAAS,IAAMQ,aAAa,KAEnD6C,EAAWnB,KAAI,SAAC6B,EAAU3B,GACzB,OACE,2BACEO,IAAKP,EACLL,IAAKgC,EAAShC,IACd7B,SAAU,CAAC,EAAG,EAAGC,YAAgBC,UAAUmD,EAAYnB,KAEvD,kBAAC,IAAD,CAAK7C,KAAM,CAAC,IAAM,IAAM,KAAOE,SAAU,CAAC,EAAG,EAAG,MAC9C,0CACET,MAAO+E,EAAS/E,MAChB4D,UAAW,GACX5C,QAAS,GACT6C,UAAW,GACXrC,aAAa,SAOvB,2BAAOf,SAAU,CAAC,EAAG,EAAG,MACtB,2BAAOsC,IAAK2B,GACV,2BAAOxD,SAAU,CAAC,EAAG,EAAGC,YAAgBC,UAAU,MAChD,kBAAC,IAAD,CAAMb,KAAM,CAAC,IAAM,EAAG,GAAIkD,YAAY,EAAMhD,SAAU,CAAC,EAAG,GAAK,IAC7D,0CACET,MAAM,SACN4D,UAAW,GACXC,UAAW,QAYnB,kBAAC,IAAD,CACEtD,KAAM,CAAC,GAAK,IAAM,GAAK,IACvBkD,YAAY,EACZvC,SAAU,CAACC,YAAgBC,UAAU,IAAK,EAAG,IAE7C,mD,kBC3FK,aAAO,IAAD,EACetB,oBAAS,GADxB,mBACZqF,EADY,KACDC,EADC,KAGbC,EAAOC,YAAQC,KAAM,GACrBC,EAAUrD,mBAShB,OANAjC,aAAS,WAEPsF,EAAQ9C,QAAQxB,SAASc,GAJb,MAI2BmD,EAAY,GAAK,MAKxD,+BACEpC,IAAKyC,EACLC,OAAQJ,EAAKK,MACbvF,QAAS,kBAAMiF,GAAcD,IAC7B1E,SAAU,CAAC,EAAG,EAAG,MCtBR,aACb,OACE,oCACE,kCAAckF,UAAW,KACzB,sCACElC,YAAY,EACZzD,MAAO,SACP2F,UAAW,EACXlF,SAAU,CAAC,EAAG,EAAG,KAEnB,0CACA,gCAAYT,MAAO,SAAU2F,UAAW,GAAKlF,SAAU,CAAC,EAAG,EAAG,KAC9D,+BAAWT,MAAO,SAAUS,SAAU,CAAC,EAAG,EAAG,GAAIkF,UAAW,MCVnD,aACb,IAAMC,EAAsBC,cACtBC,EAAqBD,cACrBE,EAAgBF,cAChBG,EAAeH,cAGfI,EAAmBC,YAAW,eAAgB,CAClD7E,MAAO,gBACP8E,KAAM,UACNhD,OAAO,IAEHiD,EAAwBF,YAAW,YAAa,CACpD7E,MAAO,gBACP8E,KAAM,SACNhD,MAAO,GACPkD,IAAK,EACLC,IAAK,IAEDC,EAAkBL,YAAW,QAAS,CAC1C7E,MAAO,cACP8E,KAAM,QACNhD,MAAO,YAEHqD,EAAqBN,YAAW,cAAe,CACnD7E,MAAO,cACP8E,KAAM,QACNM,SAAU,EACVtD,MAAO,CAAEtB,GAAI,EAAGG,GAAI,KAEhB0E,EAAiBR,YAAW,QAAS,CACzC7E,MAAO,aACP8E,KAAM,QACNhD,MAAO,YAET,OACE,oCACE,kCAAcwC,UAAWS,IACzB,sCACE3C,YAAY,EACZzD,MAAO,SACP2F,UAAW,EACXlF,SAAU,CAAC,EAAG,EAAG,GACjBsC,IAAK6C,IAEP,qCAAiB7C,IAAK+C,IACtB,gCACE9F,MAAOuG,EACPZ,UAAW,GACXlF,SAAU,CAAC+F,EAAmB3E,EAAG,EAAG2E,EAAmBxE,GACvDe,IAAKgD,IAEP,+BACE/F,MAAO0G,EACPjG,SAAU,CAAC,EAAG,EAAG,GACjBkF,UAAW,EACX5C,IAAKiD,IAENC,GACC,oCACGL,EAAoBlD,SACnB,4CACEnC,KAAM,CAACqF,EAAoBlD,QAxDpB,MA2DVoD,EAAmBpD,SAClB,2CACEnC,KAAM,CAACuF,EAAmBpD,QA7DnB,MAgEVqD,EAAcrD,SACb,sCAAkBnC,KAAM,CAACwF,EAAcrD,QAjE9B,MAmEVsD,EAAatD,SACZ,qCAAiBnC,KAAM,CAACyF,EAAatD,cC5ElC,aACb,OACE,+BACE,kCAAciD,UAAW,KACzB,sCACE3F,MAAM,kBACN2F,UAAW,GACXlF,SAAU,CAAC,EAAG,EAAG,KAEnB,sCAAkBT,MAAM,sBAAsBS,SAAU,EAAE,EAAG,EAAG,KAChE,sCAAkBT,MAAM,qBAAqBS,SAAU,CAAC,EAAG,EAAG,KARhE,MCAW,aACb,IAAMkG,EAAgBd,cAChBe,EAAef,cACfgB,EAAgBhB,cAGhBI,EAAmBC,YAAW,eAAgB,CAClD7E,MAAO,gBACP8E,KAAM,UACNhD,OAAO,IAEH2D,EAAoBZ,YAAW,QAAS,CAC5C7E,MAAO,gBACP8E,KAAM,QACNhD,MAAO,qBAEHiD,EAAwBF,YAAW,YAAa,CACpD7E,MAAO,gBACP8E,KAAM,SACNhD,MAAO,GACPkD,IAAK,EACLC,IAAK,IAEDS,EAAkBb,YAAW,QAAS,CAC1C7E,MAAO,cACP8E,KAAM,QACNhD,MAAO,oBAEH6D,EAAsBd,YAAW,YAAa,CAClD7E,MAAO,cACP8E,KAAM,SACNhD,MAAO,GACPkD,IAAK,EACLC,IAAK,IAEDW,EAAiBf,YAAW,QAAS,CACzC7E,MAAO,aACP8E,KAAM,QACNhD,MAAO,wBAEH+D,EAAqBhB,YAAW,YAAa,CACjD7E,MAAO,aACP8E,KAAM,SACNhD,MAAO,EACPkD,IAAK,EACLC,IAAK,IAEDa,EAAkBjB,YAAW,QAAS,CAC1C7E,MAAO,cACP8E,KAAM,QACNhD,MAAO,uBAEHiE,EAAsBlB,YAAW,YAAa,CAClD7E,MAAO,cACP8E,KAAM,SACNhD,MAAO,EACPkD,IAAK,EACLC,IAAK,IAGP,OACE,+BACE,kCACEtG,MAAO8G,EACPnB,UAAWS,IAEb,sCACEpG,MAAO+G,EACPpB,UAAWqB,EACXvG,SAAU,CAAC,EAAG,EAAG,GACjBsC,IAAK4D,IAEP,sCACE3G,MAAOiH,EACPtB,UAAWuB,EACXzG,SAAU,EAAE,EAAG,EAAG,GAClBsC,IAAK6D,IAEP,sCACE5G,MAAOmH,EACPxB,UAAWyB,EACX3G,SAAU,CAAC,EAAG,EAAG,GACjBsC,IAAK8D,IAENZ,GACC,oCACGU,EAAcjE,SACb,4CACEnC,KAAM,CAACoG,EAAcjE,QAnFd,MAsFVkE,EAAalE,SACZ,4CAAwBnC,KAAM,CAACqG,EAAalE,QAvFnC,MAyFVmE,EAAcnE,SACb,4CACEnC,KAAM,CAACsG,EAAcnE,QA3Fd,SCPN,aACb,OACE,+BACE,kCAAciD,UAAW,KACzB,+BAAW3F,MAAM,kBAAkBS,SAAU,CAAC,EAAG,GAAI,KACrD,+BAAWT,MAAM,sBAAsBS,SAAU,EAAE,EAAG,EAAG,KACzD,+BAAWT,MAAM,qBAAqBS,SAAU,CAAC,EAAG,EAAG,OCJ9C,aACb,IAAM4G,EAAexB,cACfyB,EAAezB,cACf0B,EAAc1B,cAEdI,EAAmBC,YAAW,eAAgB,CAClD7E,MAAO,gBACP8E,KAAM,UACNhD,OAAO,IAEH2D,EAAoBZ,YAAW,QAAS,CAC5C7E,MAAO,gBACP8E,KAAM,QACNhD,MAAO,qBAEHiD,EAAwBF,YAAW,YAAa,CACpD7E,MAAO,gBACP8E,KAAM,SACNhD,MAAO,GACPkD,IAAK,EACLC,IAAK,IAEDkB,EAAiBtB,YAAW,QAAS,CACzC7E,MAAO,aACP8E,KAAM,QACNhD,MAAO,oBAEHsE,EAAiBvB,YAAW,QAAS,CACzC7E,MAAO,aACP8E,KAAM,QACNhD,MAAO,wBAEHuE,EAAgBxB,YAAW,QAAS,CACxC7E,MAAO,YACP8E,KAAM,QACNhD,MAAO,uBAGT,OACE,+BACE,kCACEnD,MAAO8G,EACPnB,UAAWS,IAEb,+BACEpG,MAAOwH,EACP/G,SAAU,CAAC,EAAG,GAAI,GAClBsC,IAAKsE,IAEP,+BACErH,MAAOyH,EACPhH,SAAU,EAAE,EAAG,EAAG,GAClBsC,IAAKuE,IAEP,+BAAWtH,MAAO0H,EAAejH,SAAU,CAAC,EAAG,EAAG,GAAIsC,IAAKwE,IAC1DtB,GACC,oCACGoB,EAAa3E,SACZ,qCAAiBnC,KAAM,CAAC8G,EAAa3E,WAGtC4E,EAAa5E,SACZ,qCAAiBnC,KAAM,CAAC+G,EAAa5E,WAEtC6E,EAAY7E,SACX,qCAAiBnC,KAAM,CAACgH,EAAY7E,c,iBC/DjC,aAAO,IAAD,EACe5C,oBAAS,GADxB,mBACZqF,EADY,KACDC,EADC,OAEStF,oBAAS,GAFlB,mBAEZ6H,EAFY,KAEJC,EAFI,OAGUtC,YAAQuC,KAAS,GAAtCC,EAHW,EAGXA,MAAOC,EAHI,EAGJA,UACTC,EAAY7F,mBAYlB,OATAjC,aAAS,WACP8H,EAAUtF,QAAQxB,SAASW,GAHf,MAID8F,EAAS,EAAI,IAAMxC,EAAY,GAAK,GAC/C6C,EAAUtF,QAAQxB,SAASc,GALf,MAMD2F,EAAS,EAAI,IAAMxC,EAAY,GAAK,GAC/C6C,EAAUtF,QAAQxB,SAASyB,GAPf,MAQDgF,EAAS,EAAI,IAAMxC,EAAY,GAAK,MAI/C,2BACEpC,IAAKiF,EACL7H,QAAS,kBAAMiF,GAAcD,IAC7B/E,cAAe,kBAAMwH,GAAWD,KAEhC,0BAAMM,SAAUH,EAAMI,QAAQD,SAAUhD,SAAU8C,EAAS,UCvBlD,aAAO,IACZD,EAAUxC,YAAQuC,KAAS,GAA3BC,MACFK,EAAaC,YAAe,GAFf,EAIFC,YACf,8BACA,MAFKC,EAJY,oBASnB,OACE,0BAAML,SAAUH,EAAMI,QAAQD,SAAUlF,IAAKoF,GAC3C,wCAAoBG,OAAQA,MCXnB,aAAO,IACZR,EAAUxC,YAAQuC,KAAS,GAA3BC,MACFK,EAAaC,YAAe,GAElC,OACE,0BAAMH,SAAUH,EAAMI,QAAQD,SAAUlF,IAAKoF,GAC3C,iDCTS,WAACtI,GAMd,OACE,0BAAWA,EACT,8BACE,uCACEU,KAAM,CAAC,EAAG,EAAG,GAAG2C,KAAI,SAACC,GAAD,OAAmB,IAARA,EANrBc,SAQZ,wCAAoBjE,MAAO,YAG5BgD,MAAM,GACJC,KAAK,MACLC,KAAI,SAACC,EAAOC,GACX,OACE,2BACE3C,SAAU,CAAC,EAAG,EAAG,GAAGyC,KAAI,SAACqF,EAAGC,GAAJ,OACtBpF,IAAUoF,EAAIvE,IAA6BsE,MAG7C,8BACE,uCACEhI,KAAM,CAAC,EAAG,EAAG,GAAG2C,KACd,SAACqF,EAAGC,GAAJ,OAAUD,GAAKnF,IAAUoF,EA1B5B,EAGGvE,UA0BJ,wCAAoBjE,MAAO,UAAa,EAAIoD,KAE9C,0BACE3C,SAAU,CAAC,EAAG,EAAG,GAAGyC,KAAI,SAACqF,EAAGC,GAAJ,OACtBpF,IAAUoF,EAAIvE,IAA6BsE,MAG7C,0CAAsBhI,KAAM,CAnC1B0D,IACC,SAmCH,wCAAoBjE,MAAO,kBChB5B,aACb,IAAMyI,EAAa,CACjB,OACA,SACA,wBACA,QACA,OACA,oBACA,QACA,uBACA,oBACA,2BACA,2BACA,8BACA,UAGIC,EAAY,CAChB,OACA,OACA,aACA,kBACA,wBACA,uBACA,8BAGIC,EAAazC,YAAW,SAAU,CAAEC,KAAM,UAAWhD,OAAO,IAC5DyF,EAAY1C,YAAW,aAAc,CAAEC,KAAM,UAAWhD,OAAO,IAC/D0F,EAAiB3C,YAAW,cAAe,CAC/CC,KAAM,UACNhD,OAAO,IAEH2F,EAAiB5C,YAAW,cAAe,CAC/CC,KAAM,UACNhD,OAAO,IAEH4F,EAAc7C,YAAW,WAAY,CACzCC,KAAM,SACNhD,MAAOuF,EAAU,GACjBM,MAAON,IAEHO,EAAe/C,YAAW,YAAa,CAC3CC,KAAM,SACNhD,MAAOsF,EAAW,IAClBO,MAAOP,IAGT,SAASS,EAAaC,GACpB,OAAOJ,IAAgBI,EAGzB,SAASC,EAAcD,GACrB,OAAOF,IAAiBE,EAG1B,OACE,oCACE,+BAEI,kBAAC,IAAD,CACEE,WAAW,EACXC,cAAc,EACdC,YAAY,IAGfX,GAAa,kBAAC,IAAD,MACbC,GAAkB,qCAClBC,GAAkB,gCAAYvI,KAAM,CAAC,GAAI,GAAI,SAAU,YAEzDoI,GACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,OAAQ,IAAKC,mBAAoB,EAAGC,mBAAoB,MAGlER,EAAa,SAAW,kBAACS,EAAD,MACxBT,EAAa,eAAiB,kBAAC,EAAD,MAC9BA,EAAa,oBAAsB,kBAAC,EAAD,MACnCA,EAAa,0BAA4B,kBAAC,EAAD,MACzCA,EAAa,yBAA2B,kBAAC,EAAD,MACxCA,EAAa,+BAAiC,kBAAC,EAAD,MAC9CE,EAAc,WAAa,kBAACQ,EAAD,MAC3BR,EAAc,0BAA4B,kBAAC,EAAD,MAC1CA,EAAc,UAAY,kBAACS,EAAD,MAC1BT,EAAc,SAAW,kBAACU,EAAD,MACzBV,EAAc,sBACb,kBAACU,EAAD,CAAMrJ,SAAU,CAAC,EAAG,EAAG,GAAIS,SAAU,CAAC,GAAK,GAAK,MAEjDkI,EAAc,UAAY,kBAACW,EAAD,MAEzB,kBAAC,WAAD,CAAUC,SAAU,MACjBZ,EAAc,yBAA2B,kBAACa,EAAD,MACzCb,EAAc,sBAAwB,kBAAClB,EAAD,MACtCkB,EAAc,6BACb,kBAAC,EAAD,MAEDA,EAAc,6BACb,kBAAC,EAAD,MAEDA,EAAc,gCACb,kBAAC,EAAD,OAILA,EAAc,WAAa,kBAACc,EAAD,QCzHnB,G,OAAA,WAgBb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,qBAAqB,EAAOC,WAAS,GAC3C,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAUC,MAAM,gBCxBtBC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDhL,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.64fd87b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glTF.ce019e05.glb\";","import React, { useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Text } from \"@react-three/drei\";\r\n\r\nexport default (props) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [color, setColor] = useState(0x00ff00);\r\n\r\n  useFrame(() => {});\r\n\r\n  return (\r\n    <group\r\n      onClick={() => setColor(0xff0000)}\r\n      onDoubleClick={() => setColor(0x0000ff)}\r\n      onPointerOut={() => setHover(false)}\r\n      onPointerOver={() => setHover(true)}\r\n    >\r\n      <mesh>\r\n        <boxBufferGeometry args={hover ? [1, 0.5, 0.01] : [1, 0.5, 0.01]} />\r\n        <meshMatcapMaterial color={color} />\r\n      </mesh>\r\n      <Text color=\"white\" fontSize={0.2} position={[0, 0, 0.01]}>\r\n        Click Me!\r\n      </Text>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { animated, useSpring } from \"react-spring/three\";\r\nimport { Text } from \"@react-three/drei\";\r\n\r\nexport default (props) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [toggle, setToggle] = useState(false);\r\n  const [colorCurrent, setColorCurrent] = useState(0xff0000);\r\n  const { opacity, rotation, scale } = useSpring({\r\n    opacity: hover ? 1 : 0.5,\r\n    scale: hover ? [1.5, 1.25] : [1, 1],\r\n    rotation: toggle ? [THREE.MathUtils.degToRad(-90), 0, 0] : [0, 0, 0],\r\n  });\r\n\r\n  useFrame(() => {});\r\n\r\n  return (\r\n    <animated.group\r\n      {...props}\r\n      onClick={() => setToggle(!toggle)}\r\n      onDoubleClick={() => setColorCurrent(colorCurrent >> 8)}\r\n      onPointerOut={() => setHover(false)}\r\n      onPointerOver={() => setHover(true)}\r\n      rotation={rotation}\r\n    >\r\n      <animated.mesh scale={scale}>\r\n        <planeBufferGeometry args={[1, 0.5]} />\r\n        <animated.meshMatcapMaterial\r\n          opacity={opacity}\r\n          color={colorCurrent}\r\n          transparent={true}\r\n        />\r\n      </animated.mesh>\r\n      <Text color=\"white\" fontSize={0.2} position={[0, 0, 0.01]}>\r\n        Click Me!\r\n      </Text>\r\n    </animated.group>\r\n  );\r\n};\r\n","import * as THREE from \"three\";\r\n\r\nexport default class {\r\n  constructor(radius) {\r\n    this.radius = radius;\r\n  }\r\n  getCoordinates(degrees) {\r\n    const angle = THREE.MathUtils.degToRad(degrees);\r\n    const x = Math.cos(angle) * this.radius;\r\n    const y = Math.sin(angle) * this.radius;\r\n    return { x, y };\r\n  }\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Text } from \"@react-three/drei\";\r\nimport { MathCircle } from \"App/utils\";\r\n\r\n/**\r\n * Clock using standard react-three-fiber jsx\r\n */\r\nexport default (props) => {\r\n  const HH = 12;\r\n  const MM = 60;\r\n  const SS = 60;\r\n\r\n  const CLOCK = useRef();\r\n  const HAND_SS = useRef();\r\n  const HAND_MM = useRef();\r\n  const HAND_HH = useRef();\r\n\r\n  const angleStart = THREE.MathUtils.degToRad(90);\r\n\r\n  useFrame(() => {\r\n    const d = new Date();\r\n\r\n    // CLOCK.current.rotation.y += 0.01;\r\n\r\n    HAND_SS.current.rotation.z = THREE.MathUtils.degToRad(\r\n      d.getSeconds() * -(360 / SS)\r\n    );\r\n    HAND_MM.current.rotation.z = THREE.MathUtils.degToRad(\r\n      d.getMinutes() * -(360 / MM)\r\n    );\r\n    HAND_HH.current.rotation.z = THREE.MathUtils.degToRad(\r\n      (d.getHours() + d.getMinutes() / MM) * -(360 / HH)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <group ref={CLOCK}>\r\n      {/* <axesHelper /> */}\r\n      <group>\r\n        <Text color=\"black\" position={[0, -0.25, 0.01]}>\r\n          Arteveldehogeschool\r\n        </Text>\r\n        {Array(HH)\r\n          .fill(null)\r\n          .map((value, index) => {\r\n            const c = new MathCircle(0.75);\r\n            const angle = index * (360 / HH) + 90;\r\n            const { x, y } = c.getCoordinates(angle);\r\n            return (\r\n              <Text color=\"black\" position={[x, y, 0.01]}>\r\n                {(12 - index).toString()}\r\n              </Text>\r\n            );\r\n          })}\r\n      </group>\r\n      <group {...props} rotation={[0, 0, angleStart]}>\r\n        <mesh receiveShadow={true}>\r\n          <circleBufferGeometry args={[1.2, 36]} />\r\n          <meshStandardMaterial opacity={0.25} transparent={true} />\r\n        </mesh>\r\n        <group position={[0, 0, 0.1]}>\r\n          <group ref={HAND_HH}>\r\n            <mesh castShadow={true} position={[0.3, 0, 0]}>\r\n              <boxBufferGeometry args={[0.6, 0.06, 0.06]} />\r\n              <meshStandardMaterial />\r\n            </mesh>\r\n          </group>\r\n          <group ref={HAND_MM}>\r\n            <mesh castShadow={true} position={[0.4, 0, 0]}>\r\n              <boxBufferGeometry args={[0.8, 0.04, 0.04]} />\r\n              <meshStandardMaterial />\r\n            </mesh>\r\n          </group>\r\n          <group ref={HAND_SS}>\r\n            <mesh castShadow={true} position={[0.5, 0, 0]}>\r\n              <boxBufferGeometry args={[1, 0.02, 0.02]} />\r\n              <meshStandardMaterial color={0xcccc00} />\r\n            </mesh>\r\n          </group>\r\n        </group>\r\n        {Array(MM)\r\n          .fill(null)\r\n          .map((value, index) => {\r\n            const radians = THREE.MathUtils.degToRad((360 / MM) * index);\r\n            return (\r\n              <group key={index} rotation={[0, 0, radians]}>\r\n                <mesh position={[1, 0, 0]}>\r\n                  <boxBufferGeometry\r\n                    args={[\r\n                      index % 5 ? 0.15 : 0.25,\r\n                      index % 5 ? 0.01 : 0.03,\r\n                      0.015,\r\n                    ]}\r\n                  />\r\n                  <meshStandardMaterial\r\n                    color={\r\n                      index === 0 ? 0x0000ff : index % 5 ? 0xffffff : 0xff0000\r\n                    }\r\n                    metalness={0.1}\r\n                    opacity={0.5}\r\n                    roughness={0.6}\r\n                    transparent={true}\r\n                  />\r\n                </mesh>\r\n              </group>\r\n            );\r\n          })}\r\n        <mesh\r\n          castShadow={true}\r\n          rotation={[THREE.MathUtils.degToRad(-90), 0, 0]}\r\n        >\r\n          <cylinderBufferGeometry args={[0.1, 0.05, 0.1, 36]} />\r\n          <meshStandardMaterial />\r\n        </mesh>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { animated, useSpring } from \"react-spring/three\";\r\n\r\nexport default (props) => {\r\n  const colors = [\"#f00\", \"#ff0\", \"#0f0\", \"#0ff\", \"#00f\", \"#f0f\"];\r\n  const color = colors[Math.floor(Math.random() * colors.length)];\r\n  const cubeRef = useRef();\r\n  const [toggle, setToggle] = useState(true);\r\n  const { opacity } = useSpring({\r\n    opacity: toggle ? 0.9 : 0.5,\r\n  });\r\n  const { position } = useSpring({\r\n    position: toggle ? [0, 0, 0] : getPosition(),\r\n  });\r\n  console.log(position);\r\n\r\n  function getPosition() {\r\n    return [(Math.random() * 2 - 1) * 4, (Math.random() * 2 - 1) * 4, 0];\r\n  }\r\n\r\n  return (\r\n    <animated.mesh\r\n      {...props}\r\n      onClick={() => setToggle(!toggle)}\r\n      position={position}\r\n    >\r\n      <boxBufferGeometry args={[1, 1, 1]} />\r\n      <animated.meshMatcapMaterial\r\n        color={color}\r\n        opacity={opacity}\r\n        ref={cubeRef}\r\n        transparent={true}\r\n      />\r\n    </animated.mesh>\r\n  );\r\n};\r\n","// @todo Rotate gauge based on range, in stead of compensating rotation in calculation.\r\nimport React, { useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Box, Circle, Cone, Cylinder } from \"@react-three/drei\";\r\n\r\nexport default (props) => {\r\n  const TICK_MARKS = [\r\n    { color: \"green\", label: \"0\", ref: useRef(), value: 0 },\r\n    { color: \"white\", label: \"10\", ref: useRef(), value: 1000 },\r\n    { color: \"white\", label: \"20\", ref: useRef(), value: 2000 },\r\n    { color: \"white\", label: \"30\", ref: useRef(), value: 3000 },\r\n    { color: \"white\", label: \"40\", ref: useRef(), value: 4000 },\r\n    { color: \"white\", label: \"50\", ref: useRef(), value: 5000 },\r\n    { color: \"orange\", label: \"60\", ref: useRef(), value: 6000 },\r\n    { color: \"red\", label: \"70\", ref: useRef(), value: 7000 },\r\n    { color: \"red\", label: \"80\", ref: useRef(), value: 8000 },\r\n  ];\r\n  const ANGLE_RANGE = 270;\r\n  const NEEDLE_STEP_DOWN = -250;\r\n  const NEEDLE_STEP_UP = 60;\r\n\r\n  const angleStep = ANGLE_RANGE / (TICK_MARKS.length - 1);\r\n  const angleStart = THREE.MathUtils.degToRad(-(90 + (360 - ANGLE_RANGE) / 2));\r\n  const valueRange = (TICK_MARKS.length - 1) * 1000;\r\n  const valueStep = ANGLE_RANGE / valueRange;\r\n  const needleRef = useRef();\r\n  let needleAngle = 0;\r\n  let needleValue = 0;\r\n  let needleStep = NEEDLE_STEP_UP;\r\n\r\n  useFrame(() => {\r\n    if (needleValue <= 0) {\r\n      needleStep = NEEDLE_STEP_UP;\r\n    } else if (valueRange <= needleValue) {\r\n      needleStep = NEEDLE_STEP_DOWN;\r\n    }\r\n    needleValue += needleStep;\r\n    needleAngle = THREE.MathUtils.degToRad(-(valueStep * needleValue));\r\n    needleRef.current.rotation.z = needleAngle;\r\n\r\n    TICK_MARKS.forEach((tickMark, index) => {\r\n      tickMark.ref.current.children[0].material.color.setColorName(\r\n        tickMark.value <= needleValue ? \"blue\" : tickMark.color\r\n      );\r\n    });\r\n  });\r\n\r\n  return (\r\n    <group {...props} rotation={[0, 0, angleStart]}>\r\n      <Circle args={[1.2, 62]} position={[0, 0, 0]} receiveShadow={true}>\r\n        <meshStandardMaterial opacity={0.25} transparent={true} />\r\n      </Circle>\r\n      {TICK_MARKS.map((tickMark, index) => {\r\n        return (\r\n          <group\r\n            key={index}\r\n            ref={tickMark.ref}\r\n            rotation={[0, 0, THREE.MathUtils.degToRad(-angleStep * index)]}\r\n          >\r\n            <Box args={[0.25, 0.05, 0.02]} position={[1, 0, 0.01]}>\r\n              <meshStandardMaterial\r\n                color={tickMark.color}\r\n                metalness={0.1}\r\n                opacity={0.5}\r\n                roughness={0.6}\r\n                transparent={true}\r\n              />\r\n            </Box>\r\n          </group>\r\n        );\r\n      })}\r\n\r\n      <group position={[0, 0, 0.05]}>\r\n        <group ref={needleRef}>\r\n          <group rotation={[0, 0, THREE.MathUtils.degToRad(-90)]}>\r\n            <Cone args={[0.03, 1, 4]} castShadow={true} position={[0, 0.5, 0]}>\r\n              <meshStandardMaterial\r\n                color=\"orange\"\r\n                metalness={0.1}\r\n                roughness={0.6}\r\n              />\r\n            </Cone>\r\n          </group>\r\n          {/* <Box args={[1, 0.05, 0.025]} castShadow={true} position={[0.5, 0, 0]}>\r\n            <meshStandardMaterial\r\n              color=\"orange\"\r\n              metalness={0.1}\r\n              roughness={0.6}\r\n            />\r\n          </Box> */}\r\n        </group>\r\n        <Cylinder\r\n          args={[0.1, 0.05, 0.1, 36]}\r\n          castShadow={true}\r\n          rotation={[THREE.MathUtils.degToRad(-90), 0, 0]}\r\n        >\r\n          <meshStandardMaterial />\r\n        </Cylinder>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nimport logo from \"./glTF.glb\";\r\n\r\nexport default () => {\r\n  const [clockwise, setClockwise] = useState(false);\r\n\r\n  const gltf = useGLTF(logo, true);\r\n  const logoRef = useRef();\r\n  const speed = 0.025;\r\n\r\n  useFrame(() => {\r\n    // logoRef.current.rotation.x += speed * (clockwise ? 1 : -1);\r\n    logoRef.current.rotation.y += speed * (clockwise ? 1 : -1);\r\n    // logoRef.current.rotation.z += speed * (clockwise ? 1 : -1);\r\n  });\r\n\r\n  return (\r\n    <primitive\r\n      ref={logoRef}\r\n      object={gltf.scene}\r\n      onClick={() => setClockwise(!clockwise)}\r\n      position={[0, 0, 0]}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <ambientLight intensity={0.1} />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={0xffffff}\r\n        intensity={1}\r\n        position={[2, 2, 1]}\r\n      />\r\n      <hemisphereLight />\r\n      <pointLight color={0xff6600} intensity={0.5} position={[0, 0, 4]} />\r\n      <spotLight color={0xfff000} position={[0, 4, 4]} intensity={1} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useResource } from \"react-three-fiber\";\r\nimport { useControl } from \"react-three-gui\";\r\n\r\nexport default () => {\r\n  const directionalLightRef = useResource();\r\n  const hemisphereLightRef = useResource();\r\n  const pointLightRef = useResource();\r\n  const spotLightRef = useResource();\r\n\r\n  const helperSize = 0.5;\r\n  const showLightHelpers = useControl(\"Show helpers\", {\r\n    group: \"Light Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const ambientLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Ambient Light\",\r\n    type: \"number\",\r\n    value: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const pointLightColor = useControl(\"Color\", {\r\n    group: \"Point Light\",\r\n    type: \"color\",\r\n    value: \"#ffcc77\",\r\n  });\r\n  const pointLightPosition = useControl(\"Position XZ\", {\r\n    group: \"Point Light\",\r\n    type: \"xypad\",\r\n    distance: 5,\r\n    value: { x: -4, y: -4 },\r\n  });\r\n  const spotLightColor = useControl(\"Color\", {\r\n    group: \"Spot Light\",\r\n    type: \"color\",\r\n    value: \"#ffcc77\",\r\n  });\r\n  return (\r\n    <>\r\n      <ambientLight intensity={ambientLightIntensity} />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={0xffffff}\r\n        intensity={1}\r\n        position={[2, 2, 1]}\r\n        ref={directionalLightRef}\r\n      />\r\n      <hemisphereLight ref={hemisphereLightRef} />\r\n      <pointLight\r\n        color={pointLightColor}\r\n        intensity={0.5}\r\n        position={[pointLightPosition.x, 0, pointLightPosition.y]}\r\n        ref={pointLightRef}\r\n      />\r\n      <spotLight\r\n        color={spotLightColor}\r\n        position={[0, 4, 4]}\r\n        intensity={1}\r\n        ref={spotLightRef}\r\n      />\r\n      {showLightHelpers && (\r\n        <>\r\n          {directionalLightRef.current && (\r\n            <directionalLightHelper\r\n              args={[directionalLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n          {hemisphereLightRef.current && (\r\n            <hemisphereLightHelper\r\n              args={[hemisphereLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n          {pointLightRef.current && (\r\n            <pointLightHelper args={[pointLightRef.current, helperSize]} />\r\n          )}\r\n          {spotLightRef.current && (\r\n            <spotLightHelper args={[spotLightRef.current]} />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <group>\r\n      <ambientLight intensity={0.1} />\r\n      <directionalLight\r\n        color=\"hsl(0, 0%, 70%)\"\r\n        intensity={0.4}\r\n        position={[0, 2, 4]}\r\n      />\r\n      <directionalLight color=\"hsl(210, 100%, 70%)\" position={[-4, 0, 0]} />\r\n      <directionalLight color=\"hsl(30, 100%, 70%)\" position={[4, 0, 0]} />s\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useResource } from \"react-three-fiber\";\r\nimport { useControl } from \"react-three-gui\";\r\n\r\nexport default () => {\r\n  const frontLightRef = useResource();\r\n  const leftLightRef = useResource();\r\n  const rightLightRef = useResource();\r\n\r\n  const helperSize = 0.5;\r\n  const showLightHelpers = useControl(\"Show helpers\", {\r\n    group: \"Light Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const ambientLightColor = useControl(\"Color\", {\r\n    group: \"Ambient Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 100%)\",\r\n  });\r\n  const ambientLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Ambient Light\",\r\n    type: \"number\",\r\n    value: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const frontLightColor = useControl(\"Color\", {\r\n    group: \"Front Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 70%)\",\r\n  });\r\n  const frontLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Front Light\",\r\n    type: \"number\",\r\n    value: 0.4,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const leftLightColor = useControl(\"Color\", {\r\n    group: \"Left Light\",\r\n    type: \"color\",\r\n    value: \"hsl(210, 100%, 70%)\",\r\n  });\r\n  const leftLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Left Light\",\r\n    type: \"number\",\r\n    value: 1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const rightLightColor = useControl(\"Color\", {\r\n    group: \"Right Light\",\r\n    type: \"color\",\r\n    value: \"hsl(30, 100%, 70%)\",\r\n  });\r\n  const rightLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Right Light\",\r\n    type: \"number\",\r\n    value: 1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <ambientLight\r\n        color={ambientLightColor}\r\n        intensity={ambientLightIntensity}\r\n      />\r\n      <directionalLight\r\n        color={frontLightColor}\r\n        intensity={frontLightIntensity}\r\n        position={[0, 2, 4]}\r\n        ref={frontLightRef}\r\n      />\r\n      <directionalLight\r\n        color={leftLightColor}\r\n        intensity={leftLightIntensity}\r\n        position={[-4, 0, 0]}\r\n        ref={leftLightRef}\r\n      />\r\n      <directionalLight\r\n        color={rightLightColor}\r\n        intensity={rightLightIntensity}\r\n        position={[4, 0, 0]}\r\n        ref={rightLightRef}\r\n      />\r\n      {showLightHelpers && (\r\n        <>\r\n          {frontLightRef.current && (\r\n            <directionalLightHelper\r\n              args={[frontLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n          {leftLightRef.current && (\r\n            <directionalLightHelper args={[leftLightRef.current, helperSize]} />\r\n          )}\r\n          {rightLightRef.current && (\r\n            <directionalLightHelper\r\n              args={[rightLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <group>\r\n      <ambientLight intensity={0.1} />\r\n      <spotLight color=\"hsl(0, 0%, 70%)\" position={[4, 2, -4]} />\r\n      <spotLight color=\"hsl(210, 100%, 70%)\" position={[-4, 2, 4]} />\r\n      <spotLight color=\"hsl(30, 100%, 70%)\" position={[4, 2, 4]} />\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useResource } from \"react-three-fiber\";\r\nimport { useControl } from \"react-three-gui\";\r\n\r\nexport default () => {\r\n  const backLightRef = useResource();\r\n  const fillLightRef = useResource();\r\n  const keyLightRef = useResource();\r\n\r\n  const showLightHelpers = useControl(\"Show helpers\", {\r\n    group: \"Light Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const ambientLightColor = useControl(\"Color\", {\r\n    group: \"Ambient Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 100%)\",\r\n  });\r\n  const ambientLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Ambient Light\",\r\n    type: \"number\",\r\n    value: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const backLightColor = useControl(\"Color\", {\r\n    group: \"Back Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 70%)\",\r\n  });\r\n  const fillLightColor = useControl(\"Color\", {\r\n    group: \"Fill Light\",\r\n    type: \"color\",\r\n    value: \"hsl(210, 100%, 70%)\",\r\n  });\r\n  const keyLightColor = useControl(\"Color\", {\r\n    group: \"Key Light\",\r\n    type: \"color\",\r\n    value: \"hsl(30, 100%, 70%)\",\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <ambientLight\r\n        color={ambientLightColor}\r\n        intensity={ambientLightIntensity}\r\n      />\r\n      <spotLight\r\n        color={backLightColor}\r\n        position={[4, 2, -4]}\r\n        ref={backLightRef}\r\n      />\r\n      <spotLight\r\n        color={fillLightColor}\r\n        position={[-4, 2, 4]}\r\n        ref={fillLightRef}\r\n      />\r\n      <spotLight color={keyLightColor} position={[4, 2, 4]} ref={keyLightRef} />\r\n      {showLightHelpers && (\r\n        <>\r\n          {backLightRef.current && (\r\n            <spotLightHelper args={[backLightRef.current]} />\r\n          )}\r\n\r\n          {fillLightRef.current && (\r\n            <spotLightHelper args={[fillLightRef.current]} />\r\n          )}\r\n          {keyLightRef.current && (\r\n            <spotLightHelper args={[keyLightRef.current]} />\r\n          )}\r\n        </>\r\n      )}\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const [clockwise, setClockwise] = useState(false);\r\n  const [rotate, setRotate] = useState(false);\r\n  const { nodes, materials } = useGLTF(suzanne, true);\r\n  const objectRef = useRef();\r\n  const speed = 0.025;\r\n\r\n  useFrame(() => {\r\n    objectRef.current.rotation.x +=\r\n      speed * (rotate ? 1 : 0) * (clockwise ? 1 : -1);\r\n    objectRef.current.rotation.y +=\r\n      speed * (rotate ? 1 : 0) * (clockwise ? 1 : -1);\r\n    objectRef.current.rotation.z +=\r\n      speed * (rotate ? 1 : 0) * (clockwise ? 1 : -1);\r\n  });\r\n\r\n  return (\r\n    <group\r\n      ref={objectRef}\r\n      onClick={() => setClockwise(!clockwise)}\r\n      onDoubleClick={() => setRotate(!rotate)}\r\n    >\r\n      <mesh geometry={nodes.Suzanne.geometry} material={materials[\"Paars\"]} />\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useGLTF, useSubdivision, useMatcapTexture } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const { nodes } = useGLTF(suzanne, true);\r\n  const suzanneRef = useSubdivision(2);\r\n\r\n  const [matcap] = useMatcapTexture(\r\n    \"6E5137_E8CA90_271912_B99C74\", // Index or ID string, see: https://github.com/emmelleppi/matcaps/\r\n    1024 // Texture size (64, 128, 256, 512, 1024)\r\n  );\r\n\r\n  return (\r\n    <mesh geometry={nodes.Suzanne.geometry} ref={suzanneRef}>\r\n      <meshMatcapMaterial matcap={matcap} />\r\n    </mesh>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useGLTF, useSubdivision } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const { nodes } = useGLTF(suzanne, true);\r\n  const suzanneRef = useSubdivision(2);\r\n\r\n  return (\r\n    <mesh geometry={nodes.Suzanne.geometry} ref={suzanneRef}>\r\n      <meshStandardMaterial />\r\n    </mesh>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const length = 1;\r\n  const radius = (length / 100) * 2;\r\n  const segments = 32;\r\n  const thickness = length / 100;\r\n\r\n  return (\r\n    <group {...props}>\r\n      <mesh>\r\n        <boxBufferGeometry\r\n          args={[1, 1, 1].map((value) => value * 1.5 * thickness)}\r\n        />\r\n        <meshMatcapMaterial color={0xffffff} />\r\n      </mesh>\r\n\r\n      {Array(3)\r\n        .fill(null)\r\n        .map((value, index) => {\r\n          return (\r\n            <group\r\n              position={[0, 0, 0].map((v, i) =>\r\n                index === i ? length / 2 + thickness * 2 : v\r\n              )}\r\n            >\r\n              <mesh>\r\n                <boxBufferGeometry\r\n                  args={[1, 1, 1].map(\r\n                    (v, i) => v * (index === i ? length : thickness)\r\n                  )}\r\n                />\r\n                <meshMatcapMaterial color={0xff0000 >> (8 * index)} />\r\n              </mesh>\r\n              <mesh\r\n                position={[0, 0, 0].map((v, i) =>\r\n                  index === i ? length / 2 + thickness * 3 : v\r\n                )}\r\n              >\r\n                <sphereBufferGeometry args={[radius, segments, segments]} />\r\n                <meshMatcapMaterial color={0xffffff} />\r\n              </mesh>\r\n            </group>\r\n          );\r\n        })}\r\n    </group>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport { useControl } from \"react-three-gui\";\r\nimport { OrbitControls, Stats } from \"@react-three/drei\";\r\nimport { Bloom, EffectComposer } from \"@react-three/postprocessing\";\r\nimport {\r\n  Button,\r\n  ButtonSpring,\r\n  Clock,\r\n  Cube,\r\n  Gauge,\r\n  GlTransmissionFormat,\r\n  Lighting,\r\n  LightingGui,\r\n  LightingStudio,\r\n  LightingStudioGui,\r\n  LightingThreePoint,\r\n  LightingThreePointGui,\r\n  Suzanne,\r\n  SuzanneMatcapTexture,\r\n  SuzanneNormalTexture,\r\n  SuzanneStandardMaterial,\r\n  Tripod,\r\n} from \"App/components\";\r\n\r\nexport default () => {\r\n  const components = [\r\n    \"None\",\r\n    \"Button\",\r\n    \"Button (React Spring)\",\r\n    \"Clock\",\r\n    \"Cube\",\r\n    \"Cube (positioned)\",\r\n    \"Gauge\",\r\n    \"GlTransmissionFormat\",\r\n    \"Suzanne (default)\",\r\n    \"Suzanne (MatCap Texture)\",\r\n    \"Suzanne (Normal Texture)\",\r\n    \"Suzanne (Standard Material)\",\r\n    \"Tripod\",\r\n  ];\r\n\r\n  const lightings = [\r\n    \"None\",\r\n    \"Demo\",\r\n    \"Demo + Gui\",\r\n    \"Studio Lighting\",\r\n    \"Studio Lighting + GUI\",\r\n    \"Three Point Lighting\",\r\n    \"Three Point Lighting + GUI\",\r\n  ];\r\n\r\n  const showEffect = useControl(\"Effect\", { type: \"boolean\", value: false });\r\n  const showStats = useControl(\"Statistics\", { type: \"boolean\", value: false });\r\n  const showAxesHelper = useControl(\"Axes Helper\", {\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const showGridHelper = useControl(\"Grid Helper\", {\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const useLighting = useControl(\"Lighting\", {\r\n    type: \"select\",\r\n    value: lightings[3],\r\n    items: lightings,\r\n  });\r\n  const useComponent = useControl(\"Component\", {\r\n    type: \"select\",\r\n    value: components[11],\r\n    items: components,\r\n  });\r\n\r\n  function showLighting(name) {\r\n    return useLighting === name;\r\n  }\r\n\r\n  function showComponent(name) {\r\n    return useComponent === name;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <group>\r\n        {true && (\r\n          <OrbitControls\r\n            enablePan={true}\r\n            enableRotate={true}\r\n            enableZoom={true}\r\n          />\r\n        )}\r\n        {showStats && <Stats />}\r\n        {showAxesHelper && <axesHelper />}\r\n        {showGridHelper && <gridHelper args={[10, 10, 0xffffff, 0x333333]} />}\r\n      </group>\r\n      {showEffect && (\r\n        <EffectComposer>\r\n          <Bloom height={500} luminanceThreshold={0} luminanceSmoothing={0.9} />\r\n        </EffectComposer>\r\n      )}\r\n      {showLighting(\"Demo\") && <Lighting />}\r\n      {showLighting(\"Demo + Gui\") && <LightingGui />}\r\n      {showLighting(\"Studio Lighting\") && <LightingStudio />}\r\n      {showLighting(\"Studio Lighting + GUI\") && <LightingStudioGui />}\r\n      {showLighting(\"Three Point Lighting\") && <LightingThreePoint />}\r\n      {showLighting(\"Three Point Lighting + GUI\") && <LightingThreePointGui />}\r\n      {showComponent(\"Button\") && <Button />}\r\n      {showComponent(\"Button (React Spring)\") && <ButtonSpring />}\r\n      {showComponent(\"Clock\") && <Clock />}\r\n      {showComponent(\"Cube\") && <Cube />}\r\n      {showComponent(\"Cube (positioned)\") && (\r\n        <Cube position={[1, 1, 1]} rotation={[0.5, 0.5, 0.5]} />\r\n      )}\r\n      {showComponent(\"Gauge\") && <Gauge />}\r\n      {true && (\r\n        <Suspense fallback={null}>\r\n          {showComponent(\"GlTransmissionFormat\") && <GlTransmissionFormat />}\r\n          {showComponent(\"Suzanne (default)\") && <Suzanne />}\r\n          {showComponent(\"Suzanne (MatCap Texture)\") && (\r\n            <SuzanneMatcapTexture />\r\n          )}\r\n          {showComponent(\"Suzanne (Normal Texture)\") && (\r\n            <SuzanneNormalTexture />\r\n          )}\r\n          {showComponent(\"Suzanne (Standard Material)\") && (\r\n            <SuzanneStandardMaterial />\r\n          )}\r\n        </Suspense>\r\n      )}\r\n      {showComponent(\"Tripod\") && <Tripod />}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { Controls, ControlsProvider } from \"react-three-gui\";\r\nimport Content from \"App/Content\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default () => {\r\n  // const port = 3001;\r\n  // const socket = io(`http://localhost:${port}`);\r\n\r\n  // socket.on(\"connect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"disconnect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"telemetry\", (message) => {\r\n  //   console.log(\"Message:\", message);\r\n  // });\r\n\r\n  return (\r\n    <ControlsProvider>\r\n      <Canvas invalidateFrameloop={false} shadowMap>\r\n        <Content />\r\n      </Canvas>\r\n      <Controls title=\"Controls\" />\r\n    </ControlsProvider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/suzanne.fdd60495.glb\";"],"sourceRoot":""}