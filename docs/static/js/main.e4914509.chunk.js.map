{"version":3,"sources":["App/components/GlTransmissionFormat/glTF.glb","App/components/Button/index.js","App/components/Button/Spring.js","App/utils/MathCircle/index.js","App/components/Clock/index.js","App/components/Cube/index.js","App/components/Gauge/index.js","App/components/GlTransmissionFormat/index.js","App/components/Lighting/index.js","App/components/Lighting/indexGui.js","App/components/Lighting/Studio.js","App/components/Lighting/StudioGui.js","App/components/Lighting/ThreePoint.js","App/components/Lighting/ThreePointGui.js","App/components/Spring/index.js","App/components/Spring/Props.js","App/components/Suzanne/index.js","App/components/Suzanne/MatcapTexture.js","App/components/Suzanne/NormalTexture.js","App/components/Suzanne/StandardMaterial.js","App/components/Suzanne/ToonMaterial.js","App/components/Tripod/index.js","App/Content.js","App/index.js","index.js","App/components/Suzanne/suzanne.glb"],"names":["module","exports","props","useState","setHover","color","setColor","useFrame","onClick","onDoubleClick","onPointerOut","onPointerOver","args","fontSize","position","hover","toggle","setToggle","colorCurrent","setColorCurrent","useSpring","opacity","scale","rotation","THREE","degToRad","group","mesh","meshMatcapMaterial","transparent","radius","this","degrees","angle","x","Math","cos","y","sin","isHour","tick","CLOCK","useRef","HAND_HH","HAND_MM","HAND_SS","angleStart","d","Date","current","z","getHours","getMinutes","getSeconds","ref","Array","fill","map","value","index","MathCircle","CLOCK_SIZE","getCoordinates","toString","receiveShadow","HAND_THICKNESS","castShadow","HAND_HH_LENGTH","HAND_MM_LENGTH","HAND_SS_LENGTH","radians","key","colors","floor","random","length","cubeRef","console","log","TICK_MARKS","label","angleStep","valueRange","valueStep","needleRef","needleAngle","needleValue","needleStep","forEach","tickMark","children","material","setColorName","metalness","roughness","clockwise","setClockwise","gltf","useGLTF","logo","logoRef","object","scene","intensity","directionalLightRef","useResource","pointLightRef","spotLightRef","showLightHelpers","useControl","type","ambientLightIntensity","min","max","pointLightColor","pointLightPosition","distance","spotLightColor","frontLightRef","leftLightRef","rightLightRef","ambientLightColor","frontLightColor","frontLightIntensity","leftLightColor","leftLightIntensity","rightLightColor","rightLightIntensity","backLightRef","fillLightRef","keyLightRef","backLightColor","backLightIntensity","fillLightColor","fillLightIntensity","keyLightColor","keyLightIntensity","useMatcapTexture","matcap","config","duration","easing","easings","delay","from","to","side","wobbly","thetaLength","geometryProps","rotate","setRotate","suzanne","nodes","materials","objectRef","geometry","Suzanne","suzanneRef","useSubdivision","useNormalTexture","anisotropy","offset","repeat","normalMap","v","i","components","lightings","showEffect","showStats","showAxesHelper","showGridHelper","useLighting","items","useComponent","showLighting","name","showComponent","enablePan","enableRotate","enableZoom","height","luminanceThreshold","luminanceSmoothing","Lighting","Button","Clock","Cube","Gauge","fallback","GlTransmissionFormat","Tripod","invalidateFrameloop","shadowMap","Content","title","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.e4914509.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glTF.ce019e05.glb\";","import React, { useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Text } from \"@react-three/drei\";\r\n\r\nexport default (props) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [color, setColor] = useState(0x00ff00);\r\n\r\n  useFrame(() => {});\r\n\r\n  return (\r\n    <group\r\n      onClick={() => setColor(0xff0000)}\r\n      onDoubleClick={() => setColor(0x0000ff)}\r\n      onPointerOut={() => setHover(false)}\r\n      onPointerOver={() => setHover(true)}\r\n    >\r\n      <mesh>\r\n        <boxBufferGeometry args={hover ? [1, 0.5, 0.01] : [1, 0.5, 0.01]} />\r\n        <meshMatcapMaterial color={color} />\r\n      </mesh>\r\n      <Text color=\"white\" fontSize={0.2} position={[0, 0, 0.01]}>\r\n        Click Me!\r\n      </Text>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { animated, useSpring } from \"react-spring/three\";\r\nimport { Text } from \"@react-three/drei\";\r\n\r\nexport default (props) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [toggle, setToggle] = useState(false);\r\n  const [colorCurrent, setColorCurrent] = useState(0xff0000);\r\n  const { opacity, rotation, scale } = useSpring({\r\n    opacity: hover ? 1 : 0.5,\r\n    scale: hover ? [1.5, 1.25] : [1, 1],\r\n    rotation: toggle ? [THREE.MathUtils.degToRad(-90), 0, 0] : [0, 0, 0],\r\n  });\r\n\r\n  useFrame(() => {});\r\n\r\n  return (\r\n    <animated.group\r\n      {...props}\r\n      onClick={() => setToggle(!toggle)}\r\n      onDoubleClick={() => setColorCurrent(colorCurrent >> 8)}\r\n      onPointerOut={() => setHover(false)}\r\n      onPointerOver={() => setHover(true)}\r\n      rotation={rotation}\r\n    >\r\n      <animated.mesh scale={scale}>\r\n        <planeBufferGeometry args={[1, 0.5]} />\r\n        <animated.meshMatcapMaterial\r\n          opacity={opacity}\r\n          color={colorCurrent}\r\n          transparent={true}\r\n        />\r\n      </animated.mesh>\r\n      <Text color=\"white\" fontSize={0.2} position={[0, 0, 0.01]}>\r\n        Click Me!\r\n      </Text>\r\n    </animated.group>\r\n  );\r\n};\r\n","import * as THREE from \"three\";\r\n\r\nexport default class {\r\n  constructor(radius) {\r\n    this.radius = radius;\r\n  }\r\n  getCoordinates(degrees) {\r\n    const angle = THREE.MathUtils.degToRad(degrees);\r\n    const x = Math.cos(angle) * this.radius;\r\n    const y = Math.sin(angle) * this.radius;\r\n    return { x, y };\r\n  }\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Text } from \"@react-three/drei\";\r\nimport { MathCircle } from \"App/utils\";\r\n\r\nfunction isHour(tick) {\r\n  return !(tick % 5);\r\n}\r\n\r\n/**\r\n * Clock using standard react-three-fiber jsx\r\n */\r\nexport default (props) => {\r\n  const HH = 12;\r\n  const MM = 60;\r\n  const SS = 60;\r\n\r\n  const CLOCK_SIZE = 1;\r\n\r\n  const HAND_THICKNESS = 0.02;\r\n  const HAND_HH_LENGTH = 0.6;\r\n  const HAND_MM_LENGTH = 0.7;\r\n  const HAND_SS_COLOR = 0xffcc66;\r\n  const HAND_SS_LENGTH = 0.8;\r\n\r\n  const MARK_HH_COLOR = 0xff0000;\r\n  const MARK_HH_LENGTH = 0.1;\r\n  const MARK_HH_WIDTH = 0.02;\r\n  const MARK_MM_COLOR = 0xffffff;\r\n  const MARK_MM_LENGTH = 0.08;\r\n  const MARK_MM_WIDTH = 0.01;\r\n  const MARK_OFFSET = 0.05;\r\n\r\n  const CLOCK = useRef();\r\n  const HAND_HH = useRef();\r\n  const HAND_MM = useRef();\r\n  const HAND_SS = useRef();\r\n\r\n  const angleStart = THREE.MathUtils.degToRad(90);\r\n\r\n  useFrame(() => {\r\n    const d = new Date();\r\n    HAND_HH.current.rotation.z = THREE.MathUtils.degToRad(\r\n      (d.getHours() + d.getMinutes() / MM) * -(360 / HH)\r\n    );\r\n    HAND_MM.current.rotation.z = THREE.MathUtils.degToRad(\r\n      d.getMinutes() * -(360 / MM)\r\n    );\r\n    HAND_SS.current.rotation.z = THREE.MathUtils.degToRad(\r\n      d.getSeconds() * -(360 / SS)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <group ref={CLOCK} {...props}>\r\n      {/* <axesHelper /> */}\r\n      <group>\r\n        <Text color=\"black\" position={[0, -0.25, 0.01]}>\r\n          Arteveldehogeschool\r\n        </Text>\r\n        {Array(HH)\r\n          .fill(null)\r\n          .map((value, index) => {\r\n            const c = new MathCircle(CLOCK_SIZE - MARK_HH_LENGTH * 2.5);\r\n            const angle = index * (360 / HH) + 90;\r\n            const { x, y } = c.getCoordinates(angle);\r\n            return (\r\n              <Text\r\n                color={HAND_SS_COLOR}\r\n                position={[x, y, 0.01]}\r\n                scale={[1.2, 1.2, 1]}\r\n              >\r\n                {(12 - index).toString()}\r\n              </Text>\r\n            );\r\n          })}\r\n      </group>\r\n      <group rotation={[0, 0, angleStart]}>\r\n        <mesh receiveShadow={true}>\r\n          <circleBufferGeometry args={[CLOCK_SIZE, MM]} />\r\n          <meshStandardMaterial opacity={0.25} transparent={true} />\r\n        </mesh>\r\n        <group position={[0, 0, HAND_THICKNESS / 2]}>\r\n          <group position={[0, 0, HAND_THICKNESS / 2]} ref={HAND_HH}>\r\n            <mesh castShadow={true} position={[HAND_HH_LENGTH / 2, 0, 0]}>\r\n              <boxBufferGeometry\r\n                args={[HAND_HH_LENGTH, 0.06, HAND_THICKNESS]}\r\n              />\r\n              <meshStandardMaterial />\r\n            </mesh>\r\n          </group>\r\n          <group position={[0, 0, HAND_THICKNESS * 2]} ref={HAND_MM}>\r\n            <mesh castShadow={true} position={[HAND_MM_LENGTH / 2, 0, 0]}>\r\n              <boxBufferGeometry\r\n                args={[HAND_MM_LENGTH, 0.04, HAND_THICKNESS]}\r\n              />\r\n              <meshStandardMaterial />\r\n            </mesh>\r\n          </group>\r\n          <group\r\n            position={[0, 0, HAND_THICKNESS * 3 + HAND_THICKNESS / 2]}\r\n            ref={HAND_SS}\r\n          >\r\n            <mesh castShadow={true} position={[HAND_SS_LENGTH / 2, 0, 0]}>\r\n              <boxBufferGeometry\r\n                args={[HAND_SS_LENGTH, 0.02, HAND_THICKNESS]}\r\n              />\r\n              <meshStandardMaterial color={HAND_SS_COLOR} />\r\n            </mesh>\r\n          </group>\r\n        </group>\r\n        {Array(MM)\r\n          .fill(null)\r\n          .map((value, index) => {\r\n            const radians = THREE.MathUtils.degToRad((360 / MM) * index);\r\n\r\n            return (\r\n              <group\r\n                key={index}\r\n                rotation={[0, 0, radians]}\r\n                position={[0, 0, 0.005]}\r\n              >\r\n                <mesh\r\n                  position={[\r\n                    CLOCK_SIZE -\r\n                      MARK_OFFSET -\r\n                      (isHour(index) ? MARK_HH_LENGTH - 0.01 : MARK_MM_LENGTH) /\r\n                        2,\r\n                    0,\r\n                    0,\r\n                  ]}\r\n                >\r\n                  <boxBufferGeometry\r\n                    args={[\r\n                      isHour(index) ? MARK_HH_LENGTH : MARK_MM_LENGTH,\r\n                      isHour(index) ? MARK_HH_WIDTH : MARK_MM_WIDTH,\r\n                      0.01,\r\n                    ]}\r\n                  />\r\n                  <meshStandardMaterial\r\n                    color={\r\n                      index === 0\r\n                        ? 0x0000ff\r\n                        : isHour(index)\r\n                        ? MARK_HH_COLOR\r\n                        : MARK_MM_COLOR\r\n                    }\r\n                  />\r\n                </mesh>\r\n              </group>\r\n            );\r\n          })}\r\n        <mesh\r\n          castShadow={true}\r\n          rotation={[THREE.MathUtils.degToRad(-90), 0, 0]}\r\n          position={[0, 0, 0.05]}\r\n        >\r\n          <cylinderBufferGeometry args={[0.1, 0.05, HAND_THICKNESS * 5, 36]} />\r\n          <meshStandardMaterial />\r\n        </mesh>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { animated, useSpring } from \"react-spring/three\";\r\n\r\nexport default (props) => {\r\n  const colors = [\"#f00\", \"#ff0\", \"#0f0\", \"#0ff\", \"#00f\", \"#f0f\"];\r\n  const color = colors[Math.floor(Math.random() * colors.length)];\r\n  const cubeRef = useRef();\r\n  const [toggle, setToggle] = useState(true);\r\n  const { opacity } = useSpring({\r\n    opacity: toggle ? 0.9 : 0.5,\r\n  });\r\n  const { position } = useSpring({\r\n    position: toggle ? [0, 0, 0] : getPosition(),\r\n  });\r\n  console.log(position);\r\n\r\n  function getPosition() {\r\n    return [(Math.random() * 2 - 1) * 4, (Math.random() * 2 - 1) * 4, 0];\r\n  }\r\n\r\n  return (\r\n    <animated.mesh\r\n      {...props}\r\n      onClick={() => setToggle(!toggle)}\r\n      position={position}\r\n    >\r\n      <boxBufferGeometry args={[1, 1, 1]} />\r\n      <animated.meshMatcapMaterial\r\n        color={color}\r\n        opacity={opacity}\r\n        ref={cubeRef}\r\n        transparent={true}\r\n      />\r\n    </animated.mesh>\r\n  );\r\n};\r\n","// @todo Rotate gauge based on range, in stead of compensating rotation in calculation.\r\nimport React, { useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Box, Circle, Cone, Cylinder } from \"@react-three/drei\";\r\n\r\nexport default (props) => {\r\n  const TICK_MARKS = [\r\n    { color: \"green\", label: \"0\", ref: useRef(), value: 0 },\r\n    { color: \"white\", label: \"10\", ref: useRef(), value: 1000 },\r\n    { color: \"white\", label: \"20\", ref: useRef(), value: 2000 },\r\n    { color: \"white\", label: \"30\", ref: useRef(), value: 3000 },\r\n    { color: \"white\", label: \"40\", ref: useRef(), value: 4000 },\r\n    { color: \"white\", label: \"50\", ref: useRef(), value: 5000 },\r\n    { color: \"orange\", label: \"60\", ref: useRef(), value: 6000 },\r\n    { color: \"red\", label: \"70\", ref: useRef(), value: 7000 },\r\n    { color: \"red\", label: \"80\", ref: useRef(), value: 8000 },\r\n  ];\r\n  const ANGLE_RANGE = 270;\r\n  const NEEDLE_STEP_DOWN = -250;\r\n  const NEEDLE_STEP_UP = 60;\r\n\r\n  const angleStep = ANGLE_RANGE / (TICK_MARKS.length - 1);\r\n  const angleStart = THREE.MathUtils.degToRad(-(90 + (360 - ANGLE_RANGE) / 2));\r\n  const valueRange = (TICK_MARKS.length - 1) * 1000;\r\n  const valueStep = ANGLE_RANGE / valueRange;\r\n  const needleRef = useRef();\r\n  let needleAngle = 0;\r\n  let needleValue = 0;\r\n  let needleStep = NEEDLE_STEP_UP;\r\n\r\n  useFrame(() => {\r\n    if (needleValue <= 0) {\r\n      needleStep = NEEDLE_STEP_UP;\r\n    } else if (valueRange <= needleValue) {\r\n      needleStep = NEEDLE_STEP_DOWN;\r\n    }\r\n    needleValue += needleStep;\r\n    needleAngle = THREE.MathUtils.degToRad(-(valueStep * needleValue));\r\n    needleRef.current.rotation.z = needleAngle;\r\n\r\n    TICK_MARKS.forEach((tickMark) => {\r\n      tickMark.ref.current.children[0].material.color.setColorName(\r\n        tickMark.value <= needleValue ? \"blue\" : tickMark.color\r\n      );\r\n    });\r\n  });\r\n\r\n  return (\r\n    <group {...props} rotation={[0, 0, angleStart]}>\r\n      <Circle args={[1.2, 62]} position={[0, 0, 0]} receiveShadow={true}>\r\n        <meshStandardMaterial opacity={0.25} transparent={true} />\r\n      </Circle>\r\n      {TICK_MARKS.map((tickMark, index) => {\r\n        return (\r\n          <group\r\n            key={index}\r\n            ref={tickMark.ref}\r\n            rotation={[0, 0, THREE.MathUtils.degToRad(-angleStep * index)]}\r\n          >\r\n            <Box args={[0.25, 0.05, 0.02]} position={[1, 0, 0.01]}>\r\n              <meshStandardMaterial\r\n                color={tickMark.color}\r\n                metalness={0.1}\r\n                opacity={0.5}\r\n                roughness={0.6}\r\n                transparent={true}\r\n              />\r\n            </Box>\r\n          </group>\r\n        );\r\n      })}\r\n\r\n      <group position={[0, 0, 0.05]}>\r\n        <group ref={needleRef}>\r\n          <group rotation={[0, 0, THREE.MathUtils.degToRad(-90)]}>\r\n            <Cone args={[0.03, 1, 4]} castShadow={true} position={[0, 0.5, 0]}>\r\n              <meshStandardMaterial\r\n                color=\"orange\"\r\n                metalness={0.1}\r\n                roughness={0.6}\r\n              />\r\n            </Cone>\r\n          </group>\r\n          {/* <Box args={[1, 0.05, 0.025]} castShadow={true} position={[0.5, 0, 0]}>\r\n            <meshStandardMaterial\r\n              color=\"orange\"\r\n              metalness={0.1}\r\n              roughness={0.6}\r\n            />\r\n          </Box> */}\r\n        </group>\r\n        <Cylinder\r\n          args={[0.1, 0.05, 0.1, 36]}\r\n          castShadow={true}\r\n          rotation={[THREE.MathUtils.degToRad(-90), 0, 0]}\r\n        >\r\n          <meshStandardMaterial />\r\n        </Cylinder>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nimport logo from \"./glTF.glb\";\r\n\r\nexport default () => {\r\n  const [clockwise, setClockwise] = useState(false);\r\n\r\n  const gltf = useGLTF(logo, true);\r\n  const logoRef = useRef();\r\n  const speed = 0.025;\r\n\r\n  useFrame(() => {\r\n    // logoRef.current.rotation.x += speed * (clockwise ? 1 : -1);\r\n    logoRef.current.rotation.y += speed * (clockwise ? 1 : -1);\r\n    // logoRef.current.rotation.z += speed * (clockwise ? 1 : -1);\r\n  });\r\n\r\n  return (\r\n    <primitive\r\n      ref={logoRef}\r\n      object={gltf.scene}\r\n      onClick={() => setClockwise(!clockwise)}\r\n      position={[0, 0, 0]}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <ambientLight intensity={0.1} />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={0xffffff}\r\n        intensity={1}\r\n        position={[2, 2, 1]}\r\n      />\r\n      <hemisphereLight />\r\n      <pointLight\r\n        castShadow={true}\r\n        color={0xff6600}\r\n        intensity={0.5}\r\n        position={[0, 0, 4]}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color={0xfff000}\r\n        position={[0, 4, 4]}\r\n        intensity={1}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useResource } from \"react-three-fiber\";\r\nimport { useControl } from \"react-three-gui\";\r\n\r\nexport default () => {\r\n  const directionalLightRef = useResource();\r\n  // const hemisphereLightRef = useResource();\r\n  const pointLightRef = useResource();\r\n  const spotLightRef = useResource();\r\n\r\n  const helperSize = 0.5;\r\n  const showLightHelpers = useControl(\"Light helpers\", {\r\n    group: \"Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const ambientLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Ambient Light\",\r\n    type: \"number\",\r\n    value: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const pointLightColor = useControl(\"Color\", {\r\n    group: \"Point Light\",\r\n    type: \"color\",\r\n    value: \"#ffcc77\",\r\n  });\r\n  const pointLightPosition = useControl(\"Position XZ\", {\r\n    group: \"Point Light\",\r\n    type: \"xypad\",\r\n    distance: 5,\r\n    value: { x: -4, y: -4 },\r\n  });\r\n  const spotLightColor = useControl(\"Color\", {\r\n    group: \"Spot Light\",\r\n    type: \"color\",\r\n    value: \"#ffcc77\",\r\n  });\r\n  return (\r\n    <>\r\n      <ambientLight intensity={ambientLightIntensity} />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={0xffffff}\r\n        intensity={1}\r\n        position={[2, 2, 1]}\r\n        ref={directionalLightRef}\r\n      />\r\n      {/* <hemisphereLight ref={hemisphereLightRef} /> */}\r\n      <pointLight\r\n        castShadow={true}\r\n        color={pointLightColor}\r\n        intensity={0.5}\r\n        position={[pointLightPosition.x, 0, pointLightPosition.y]}\r\n        ref={pointLightRef}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color={spotLightColor}\r\n        position={[0, 4, 4]}\r\n        intensity={1}\r\n        ref={spotLightRef}\r\n      />\r\n      {showLightHelpers && (\r\n        <>\r\n          {directionalLightRef.current && (\r\n            <directionalLightHelper\r\n              args={[directionalLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n          {/* {hemisphereLightRef.current && (\r\n            <hemisphereLightHelper\r\n              args={[hemisphereLightRef.current, helperSize]}\r\n            />\r\n          )} */}\r\n          {pointLightRef.current && (\r\n            <pointLightHelper args={[pointLightRef.current, helperSize]} />\r\n          )}\r\n          {spotLightRef.current && (\r\n            <spotLightHelper args={[spotLightRef.current]} />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <group>\r\n      <ambientLight intensity={0.1} />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color=\"hsl(0, 0%, 70%)\"\r\n        intensity={0.4}\r\n        position={[0, 2, 4]}\r\n      />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color=\"hsl(210, 100%, 70%)\"\r\n        position={[-4, 0, 0]}\r\n      />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color=\"hsl(30, 100%, 70%)\"\r\n        position={[4, 0, 0]}\r\n      />\r\n      s\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useResource } from \"react-three-fiber\";\r\nimport { useControl } from \"react-three-gui\";\r\n\r\nexport default () => {\r\n  const frontLightRef = useResource();\r\n  const leftLightRef = useResource();\r\n  const rightLightRef = useResource();\r\n\r\n  const helperSize = 0.5;\r\n  const showLightHelpers = useControl(\"Light helpers\", {\r\n    group: \"Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const ambientLightColor = useControl(\"Color\", {\r\n    group: \"Ambient Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 100%)\",\r\n  });\r\n  const ambientLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Ambient Light\",\r\n    type: \"number\",\r\n    value: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const frontLightColor = useControl(\"Color\", {\r\n    group: \"Front Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 70%)\",\r\n  });\r\n  const frontLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Front Light\",\r\n    type: \"number\",\r\n    value: 0.4,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const leftLightColor = useControl(\"Color\", {\r\n    group: \"Left Light\",\r\n    type: \"color\",\r\n    value: \"hsl(210, 100%, 70%)\",\r\n  });\r\n  const leftLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Left Light\",\r\n    type: \"number\",\r\n    value: 1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const rightLightColor = useControl(\"Color\", {\r\n    group: \"Right Light\",\r\n    type: \"color\",\r\n    value: \"hsl(30, 100%, 70%)\",\r\n  });\r\n  const rightLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Right Light\",\r\n    type: \"number\",\r\n    value: 1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <ambientLight\r\n        color={ambientLightColor}\r\n        intensity={ambientLightIntensity}\r\n      />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={frontLightColor}\r\n        intensity={frontLightIntensity}\r\n        position={[0, 2, 4]}\r\n        ref={frontLightRef}\r\n      />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={leftLightColor}\r\n        intensity={leftLightIntensity}\r\n        position={[-4, 0, 0]}\r\n        ref={leftLightRef}\r\n      />\r\n      <directionalLight\r\n        castShadow={true}\r\n        color={rightLightColor}\r\n        intensity={rightLightIntensity}\r\n        position={[4, 0, 0]}\r\n        ref={rightLightRef}\r\n      />\r\n      {showLightHelpers && (\r\n        <>\r\n          {frontLightRef.current && (\r\n            <directionalLightHelper\r\n              args={[frontLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n          {leftLightRef.current && (\r\n            <directionalLightHelper args={[leftLightRef.current, helperSize]} />\r\n          )}\r\n          {rightLightRef.current && (\r\n            <directionalLightHelper\r\n              args={[rightLightRef.current, helperSize]}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <group>\r\n      <ambientLight intensity={0.1} />\r\n      <spotLight\r\n        castShadow={true}\r\n        color=\"hsl(0, 0%, 70%)\"\r\n        position={[4, 2, -4]}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color=\"hsl(210, 100%, 70%)\"\r\n        position={[-4, 2, 4]}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color=\"hsl(30, 100%, 70%)\"\r\n        position={[4, 2, 4]}\r\n      />\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useResource } from \"react-three-fiber\";\r\nimport { useControl } from \"react-three-gui\";\r\n\r\nexport default () => {\r\n  const backLightRef = useResource();\r\n  const fillLightRef = useResource();\r\n  const keyLightRef = useResource();\r\n\r\n  const showLightHelpers = useControl(\"Light helpers\", {\r\n    group: \"Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const ambientLightColor = useControl(\"Color\", {\r\n    group: \"Ambient Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 100%)\",\r\n  });\r\n  const ambientLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Ambient Light\",\r\n    type: \"number\",\r\n    value: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const backLightColor = useControl(\"Color\", {\r\n    group: \"Back Light\",\r\n    type: \"color\",\r\n    value: \"hsl(0, 0%, 70%)\",\r\n  });\r\n  const backLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Back Light\",\r\n    type: \"number\",\r\n    value: 1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const fillLightColor = useControl(\"Color\", {\r\n    group: \"Fill Light\",\r\n    type: \"color\",\r\n    value: \"hsl(210, 100%, 70%)\",\r\n  });\r\n  const fillLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Fill Light\",\r\n    type: \"number\",\r\n    value: 0.75,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n  const keyLightColor = useControl(\"Color\", {\r\n    group: \"Key Light\",\r\n    type: \"color\",\r\n    value: \"hsl(30, 100%, 70%)\",\r\n  });\r\n  const keyLightIntensity = useControl(\"Intensity\", {\r\n    group: \"Key Light\",\r\n    type: \"number\",\r\n    value: 1,\r\n    min: 0,\r\n    max: 1,\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <ambientLight\r\n        color={ambientLightColor}\r\n        intensity={ambientLightIntensity}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color={backLightColor}\r\n        intensity={backLightIntensity}\r\n        position={[4, 2, -4]}\r\n        ref={backLightRef}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color={fillLightColor}\r\n        intensity={fillLightIntensity}\r\n        position={[-4, 2, 4]}\r\n        ref={fillLightRef}\r\n      />\r\n      <spotLight\r\n        castShadow={true}\r\n        color={keyLightColor}\r\n        intensity={keyLightIntensity}\r\n        position={[4, 2, 4]}\r\n        ref={keyLightRef}\r\n      />\r\n      {showLightHelpers && (\r\n        <>\r\n          {backLightRef.current && (\r\n            <spotLightHelper args={[backLightRef.current]} />\r\n          )}\r\n\r\n          {fillLightRef.current && (\r\n            <spotLightHelper args={[fillLightRef.current]} />\r\n          )}\r\n          {keyLightRef.current && (\r\n            <spotLightHelper args={[keyLightRef.current]} />\r\n          )}\r\n        </>\r\n      )}\r\n    </group>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useMatcapTexture } from \"@react-three/drei\";\r\nimport { animated, useSpring } from \"react-spring/three\";\r\nimport * as easings from \"d3-ease\";\r\n\r\nexport default (props) => {\r\n  const [toggle, setToggle] = useState(true);\r\n  const [matcap] = useMatcapTexture(\r\n    \"80CA23_B7EE37_D5FA4C_A3E434\", // Index or ID string, see: https://github.com/emmelleppi/matcaps/\r\n    1024 // Texture size (64, 128, 256, 512, 1024)\r\n  );\r\n  const { opacity, position } = useSpring({\r\n    config: {\r\n      duration: 200,\r\n      easing: easings.easeCubic,\r\n    },\r\n    delay: 100,\r\n    from: {\r\n      opacity: toggle ? 0.5 : 1,\r\n      position: toggle ? [0, 0, 0] : [0, 0, -2],\r\n    },\r\n    to: [\r\n      { opacity: toggle ? 1 : 0.5 },\r\n      { opacity: toggle ? 0.5 : 1 },\r\n      { opacity: toggle ? 1 : 0.5, position: toggle ? [0, 0, -2] : [0, 0, 0] },\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <group {...props}>\r\n      <mesh onClick={() => setToggle(!toggle)}>\r\n        <ringBufferGeometry\r\n          args={[\r\n            1.1, // innerRadius\r\n            1.9, // outerRadius\r\n            72, // thetaSegments\r\n            8, // phiSegments\r\n            THREE.MathUtils.degToRad(90), // thetaStart\r\n            THREE.MathUtils.degToRad(350), // thetaLength\r\n          ]}\r\n        />\r\n        <animated.meshMatcapMaterial\r\n          // color={materialProps.color}\r\n          matcap={matcap}\r\n          opacity={opacity}\r\n          side={THREE.DoubleSide}\r\n          transparent={true}\r\n        />\r\n      </mesh>\r\n      <animated.mesh position={position}>\r\n        <torusBufferGeometry\r\n          args={[\r\n            1.5, // radius\r\n            0.5, // tube\r\n            72, // radialSegments\r\n            32, // tubularSegments\r\n            THREE.MathUtils.degToRad(360), // arc\r\n          ]}\r\n        />\r\n        <meshMatcapMaterial matcap={matcap} opacity={0.25} transparent={true} />\r\n      </animated.mesh>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useMatcapTexture } from \"@react-three/drei\";\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport { config } from \"react-spring/three\";\r\n\r\nexport default (props) => {\r\n  const [toggle, setToggle] = useState(true);\r\n  const [matcap] = useMatcapTexture(\r\n    \"80CA23_B7EE37_D5FA4C_A3E434\", // Index or ID string, see: https://github.com/emmelleppi/matcaps/\r\n    1024 // Texture size (64, 128, 256, 512, 1024)\r\n  );\r\n  return (\r\n    <group {...props}>\r\n      <mesh onClick={() => setToggle(!toggle)}>\r\n        <Spring\r\n          config={config.wobbly}\r\n          delay={100}\r\n          from={{ thetaLength: toggle ? 10 : 350 }}\r\n          to={{ thetaLength: toggle ? 350 : 10 }}\r\n        >\r\n          {(geometryProps) => (\r\n            <ringBufferGeometry\r\n              args={[\r\n                1.1, // innerRadius\r\n                1.9, // outerRadius\r\n                72, // thetaSegments\r\n                8, // phiSegments\r\n                THREE.MathUtils.degToRad(90), // thetaStart\r\n                THREE.MathUtils.degToRad(geometryProps.thetaLength), // thetaLength\r\n              ]}\r\n            />\r\n          )}\r\n        </Spring>\r\n        <meshMatcapMaterial\r\n          matcap={matcap}\r\n          opacity={1}\r\n          side={THREE.DoubleSide}\r\n          transparent={true}\r\n        />\r\n      </mesh>\r\n      <mesh>\r\n        <torusBufferGeometry\r\n          args={[\r\n            1.5, // radius\r\n            0.5, // tube\r\n            36, // radialSegments\r\n            72, // tubularSegments\r\n            THREE.MathUtils.degToRad(360), // arc\r\n          ]}\r\n        />\r\n        <meshMatcapMaterial matcap={matcap} opacity={0.25} transparent={true} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const [clockwise, setClockwise] = useState(false);\r\n  const [rotate, setRotate] = useState(false);\r\n  const { nodes, materials } = useGLTF(suzanne, true);\r\n  const objectRef = useRef();\r\n  const speed = 0.025;\r\n\r\n  useFrame(() => {\r\n    objectRef.current.rotation.x +=\r\n      speed * (rotate ? 1 : 0) * (clockwise ? 1 : -1);\r\n    objectRef.current.rotation.y +=\r\n      speed * (rotate ? 1 : 0) * (clockwise ? 1 : -1);\r\n    objectRef.current.rotation.z +=\r\n      speed * (rotate ? 1 : 0) * (clockwise ? 1 : -1);\r\n  });\r\n\r\n  return (\r\n    <group\r\n      ref={objectRef}\r\n      onClick={() => setClockwise(!clockwise)}\r\n      onDoubleClick={() => setRotate(!rotate)}\r\n    >\r\n      <mesh geometry={nodes.Suzanne.geometry} material={materials[\"Paars\"]} />\r\n    </group>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useGLTF, useSubdivision, useMatcapTexture } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const { nodes } = useGLTF(suzanne, true);\r\n  const suzanneRef = useSubdivision(2);\r\n\r\n  const [matcap] = useMatcapTexture(\r\n    \"6E5137_E8CA90_271912_B99C74\", // Index or ID string, see: https://github.com/emmelleppi/matcaps/\r\n    1024 // Texture size (64, 128, 256, 512, 1024)\r\n  );\r\n\r\n  return (\r\n    <mesh geometry={nodes.Suzanne.geometry} ref={suzanneRef}>\r\n      <meshMatcapMaterial matcap={matcap} />\r\n    </mesh>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useGLTF, useSubdivision, useNormalTexture } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const { nodes } = useGLTF(suzanne, true);\r\n  const suzanneRef = useSubdivision(2);\r\n\r\n  const [normalMap] = useNormalTexture(\r\n    8, // Index or file name, see: https://github.com/emmelleppi/normal-maps/\r\n\r\n    //0 index of the normal texture - https://github.com/emmelleppi/normal-maps/blob/master/normals.json\r\n    {\r\n      anisotropy: 8,\r\n      offset: [0, 0],\r\n      repeat: [10, 10],\r\n    }\r\n  );\r\n\r\n  return (\r\n    <mesh geometry={nodes.Suzanne.geometry} ref={suzanneRef}>\r\n      <meshStandardMaterial normalMap={normalMap} />\r\n    </mesh>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useGLTF, useSubdivision } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const { nodes } = useGLTF(suzanne, true);\r\n  const suzanneRef = useSubdivision(2);\r\n\r\n  return (\r\n    <mesh geometry={nodes.Suzanne.geometry} ref={suzanneRef}>\r\n      <meshStandardMaterial />\r\n    </mesh>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useGLTF, useSubdivision } from \"@react-three/drei\";\r\n\r\nimport suzanne from \"./suzanne.glb\";\r\n\r\nexport default () => {\r\n  const { nodes } = useGLTF(suzanne, true);\r\n  const suzanneRef = useSubdivision(2);\r\n\r\n  return (\r\n    <mesh geometry={nodes.Suzanne.geometry} ref={suzanneRef}>\r\n      <meshToonMaterial />\r\n    </mesh>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const length = 1;\r\n  const radius = (length / 100) * 2;\r\n  const segments = 32;\r\n  const thickness = length / 100;\r\n\r\n  return (\r\n    <group {...props}>\r\n      <mesh>\r\n        <boxBufferGeometry\r\n          args={[1, 1, 1].map((value) => value * 1.5 * thickness)}\r\n        />\r\n        <meshMatcapMaterial color={0xffffff} />\r\n      </mesh>\r\n\r\n      {Array(3)\r\n        .fill(null)\r\n        .map((value, index) => {\r\n          return (\r\n            <group\r\n              position={[0, 0, 0].map((v, i) =>\r\n                index === i ? length / 2 + thickness * 2 : v\r\n              )}\r\n            >\r\n              <mesh>\r\n                <boxBufferGeometry\r\n                  args={[1, 1, 1].map(\r\n                    (v, i) => v * (index === i ? length : thickness)\r\n                  )}\r\n                />\r\n                <meshMatcapMaterial color={0xff0000 >> (8 * index)} />\r\n              </mesh>\r\n              <mesh\r\n                position={[0, 0, 0].map((v, i) =>\r\n                  index === i ? length / 2 + thickness * 3 : v\r\n                )}\r\n              >\r\n                <sphereBufferGeometry args={[radius, segments, segments]} />\r\n                <meshMatcapMaterial color={0xffffff} />\r\n              </mesh>\r\n            </group>\r\n          );\r\n        })}\r\n    </group>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport { useControl } from \"react-three-gui\";\r\nimport { OrbitControls, Stats } from \"@react-three/drei\";\r\nimport { Bloom, EffectComposer } from \"@react-three/postprocessing\";\r\nimport {\r\n  Button,\r\n  ButtonSpring,\r\n  Clock,\r\n  Cube,\r\n  Gauge,\r\n  GlTransmissionFormat,\r\n  Lighting,\r\n  LightingGui,\r\n  LightingStudio,\r\n  LightingStudioGui,\r\n  LightingThreePoint,\r\n  LightingThreePointGui,\r\n  Spring,\r\n  SpringProps,\r\n  Suzanne,\r\n  SuzanneMatcapTexture,\r\n  SuzanneNormalTexture,\r\n  SuzanneStandardMaterial,\r\n  SuzanneToonMaterial,\r\n  Tripod,\r\n} from \"App/components\";\r\n\r\nexport default () => {\r\n  const components = [\r\n    \"None\",\r\n    \"Button\",\r\n    \"Button (React Spring)\",\r\n    \"Clock\",\r\n    \"Cube\",\r\n    \"Cube (positioned)\",\r\n    \"Gauge\",\r\n    \"GlTransmissionFormat\",\r\n    \"Spring\",\r\n    \"Spring (Props)\",\r\n    \"Suzanne (default)\",\r\n    \"Suzanne (MatCap Texture)\",\r\n    \"Suzanne (Normal Texture)\",\r\n    \"Suzanne (Standard Material)\",\r\n    \"Suzanne (Toon Material)\",\r\n    \"Tripod\",\r\n  ];\r\n\r\n  const lightings = [\r\n    \"None\",\r\n    \"Demo\",\r\n    \"Demo + GUI\",\r\n    \"Studio Lighting\",\r\n    \"Studio Lighting + GUI\",\r\n    \"Three Point Lighting\",\r\n    \"Three Point Lighting + GUI\",\r\n  ];\r\n\r\n  const showEffect = useControl(\"Effect\", { type: \"boolean\", value: false });\r\n  const showStats = useControl(\"Statistics\", { type: \"boolean\", value: false });\r\n  const showAxesHelper = useControl(\"Axes Helper\", {\r\n    group: \"Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const showGridHelper = useControl(\"Grid Helper\", {\r\n    group: \"Helpers\",\r\n    type: \"boolean\",\r\n    value: true,\r\n  });\r\n  const useLighting = useControl(\"Lighting\", {\r\n    type: \"select\",\r\n    value: lightings[3],\r\n    items: lightings,\r\n  });\r\n  const useComponent = useControl(\"Component\", {\r\n    type: \"select\",\r\n    value: components[8],\r\n    items: components,\r\n  });\r\n\r\n  function showLighting(name) {\r\n    return useLighting === name;\r\n  }\r\n\r\n  function showComponent(name) {\r\n    return useComponent === name;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <group>\r\n        {true && (\r\n          <OrbitControls\r\n            enablePan={true}\r\n            enableRotate={true}\r\n            enableZoom={true}\r\n          />\r\n        )}\r\n        {showStats && <Stats />}\r\n        {showAxesHelper && <axesHelper />}\r\n        {showGridHelper && <gridHelper args={[10, 10, 0xffffff, 0x333333]} />}\r\n      </group>\r\n      {showEffect && (\r\n        <EffectComposer>\r\n          <Bloom height={500} luminanceThreshold={0} luminanceSmoothing={0.9} />\r\n        </EffectComposer>\r\n      )}\r\n      {showLighting(\"Demo\") && <Lighting />}\r\n      {showLighting(\"Demo + GUI\") && <LightingGui />}\r\n      {showLighting(\"Studio Lighting\") && <LightingStudio />}\r\n      {showLighting(\"Studio Lighting + GUI\") && <LightingStudioGui />}\r\n      {showLighting(\"Three Point Lighting\") && <LightingThreePoint />}\r\n      {showLighting(\"Three Point Lighting + GUI\") && <LightingThreePointGui />}\r\n      {showComponent(\"Button\") && <Button />}\r\n      {showComponent(\"Button (React Spring)\") && <ButtonSpring />}\r\n      {showComponent(\"Clock\") && <Clock />}\r\n      {showComponent(\"Cube\") && <Cube />}\r\n      {showComponent(\"Cube (positioned)\") && (\r\n        <Cube position={[1, 1, 1]} rotation={[0.5, 0.5, 0.5]} />\r\n      )}\r\n      {showComponent(\"Gauge\") && <Gauge />}\r\n      {true && (\r\n        <Suspense fallback={null}>\r\n          {showComponent(\"GlTransmissionFormat\") && <GlTransmissionFormat />}\r\n          {showComponent(\"Spring\") && <Spring />}\r\n          {showComponent(\"Spring (Props)\") && <SpringProps />}\r\n          {showComponent(\"Suzanne (default)\") && <Suzanne />}\r\n          {showComponent(\"Suzanne (MatCap Texture)\") && (\r\n            <SuzanneMatcapTexture />\r\n          )}\r\n          {showComponent(\"Suzanne (Normal Texture)\") && (\r\n            <SuzanneNormalTexture />\r\n          )}\r\n          {showComponent(\"Suzanne (Standard Material)\") && (\r\n            <SuzanneStandardMaterial />\r\n          )}\r\n          {showComponent(\"Suzanne (Toon Material)\") && <SuzanneToonMaterial />}\r\n        </Suspense>\r\n      )}\r\n      {showComponent(\"Tripod\") && <Tripod />}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { Controls, ControlsProvider } from \"react-three-gui\";\r\nimport Content from \"App/Content\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default () => {\r\n  // const port = 3001;\r\n  // const socket = io(`http://localhost:${port}`);\r\n\r\n  // socket.on(\"connect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"disconnect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"telemetry\", (message) => {\r\n  //   console.log(\"Message:\", message);\r\n  // });\r\n\r\n  return (\r\n    <ControlsProvider>\r\n      <Canvas invalidateFrameloop={false} shadowMap>\r\n        <Content />\r\n      </Canvas>\r\n      <Controls title=\"Controls\" />\r\n    </ControlsProvider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/suzanne.fdd60495.glb\";"],"sourceRoot":""}