{"version":3,"sources":["App/components/GlTransmissionFormat/glTF.glb","App/components/Suzanne/suzanne.glb","App/utils/Circle/index.js","App/utils/Convert/index.js","App/components/Clock/index.js","App/components/Lighting/index.js","App/index.js","index.js"],"names":["module","exports","radius","this","degrees","angle","Convert","toRadians","x","Math","cos","y","sin","PI","props","CLOCK","useRef","HAND_SS","HAND_MM","HAND_HH","angleStart","useFrame","d","Date","current","rotation","z","getSeconds","getMinutes","getHours","ref","color","position","Array","fill","map","value","index","Circle","getCoordinates","toString","receiveShadow","args","opacity","transparent","castShadow","radians","key","metalness","roughness","lightRef","pos","intensity","invalidateFrameloop","shadowMap","enablePan","enableRotate","enableZoom","luminanceThreshold","luminanceSmoothing","height","Lighting","Clock","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.be94f2d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glTF.ce019e05.glb\";","module.exports = __webpack_public_path__ + \"static/media/suzanne.fdd60495.glb\";","import { useTessellation } from \"@react-three/drei\";\r\nimport { Convert } from \"App/utils\";\r\n\r\nexport default class {\r\n  constructor(radius) {\r\n    this.radius = radius;\r\n  }\r\n  getCoordinates(degrees) {\r\n    const angle = Convert.toRadians(degrees);\r\n    const x = Math.cos(angle) * this.radius;\r\n    const y = Math.sin(angle) * this.radius;\r\n    return { x, y };\r\n  }\r\n}\r\n","export default class {\r\n  static toRadians(degrees) {\r\n    return (Math.PI / 180) * degrees;\r\n  }\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { Text } from \"@react-three/drei\";\r\nimport { Circle, Convert } from \"App/utils\";\r\n\r\nexport default (props) => {\r\n  const HH = 12;\r\n  const MM = 60;\r\n  const SS = 60;\r\n\r\n  const CLOCK = useRef();\r\n  const HAND_SS = useRef();\r\n  const HAND_MM = useRef();\r\n  const HAND_HH = useRef();\r\n\r\n  const angleStart = Convert.toRadians(90);\r\n\r\n  useFrame(() => {\r\n    const d = new Date();\r\n\r\n    // CLOCK.current.rotation.y += 0.01;\r\n\r\n    HAND_SS.current.rotation.z = Convert.toRadians(\r\n      d.getSeconds() * -(360 / SS)\r\n    );\r\n    HAND_MM.current.rotation.z = Convert.toRadians(\r\n      d.getMinutes() * -(360 / MM)\r\n    );\r\n    HAND_HH.current.rotation.z = Convert.toRadians(\r\n      (d.getHours() + d.getMinutes() / MM) * -(360 / HH)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <group ref={CLOCK}>\r\n      {/* <axesHelper /> */}\r\n      <group>\r\n        <Text color=\"black\" position={[0, -0.25, 0.01]}>\r\n          Arteveldehogeschool\r\n        </Text>\r\n        {Array(HH)\r\n          .fill(null)\r\n          .map((value, index) => {\r\n            const c = new Circle(0.75);\r\n            const angle = index * (360 / HH) + 90;\r\n            const { x, y } = c.getCoordinates(angle);\r\n            return (\r\n              <Text color=\"black\" position={[x, y, 0.01]}>\r\n                {(12 - index).toString()}\r\n              </Text>\r\n            );\r\n          })}\r\n      </group>\r\n      <group {...props} rotation={[0, 0, angleStart]}>\r\n        <mesh receiveShadow={true} rotation={[Convert.toRadians(90), 0, 0]}>\r\n          <cylinderBufferGeometry args={[1.2, 1.2, 0.01, 64]} />\r\n          <meshStandardMaterial opacity={0.25} transparent={true} />\r\n        </mesh>\r\n        <group ref={HAND_HH}>\r\n          <mesh castShadow={true} position={[0.3, 0, 0]}>\r\n            <boxBufferGeometry args={[0.6, 0.06, 0.06]} />\r\n            <meshStandardMaterial />\r\n          </mesh>\r\n        </group>\r\n        <group ref={HAND_MM}>\r\n          <mesh castShadow={true} position={[0.4, 0, 0]}>\r\n            <boxBufferGeometry args={[0.8, 0.04, 0.04]} />\r\n            <meshStandardMaterial />\r\n          </mesh>\r\n        </group>\r\n        <group ref={HAND_SS}>\r\n          <mesh castShadow={true} position={[0.5, 0, 0]}>\r\n            <boxBufferGeometry args={[1, 0.02, 0.02]} />\r\n            <meshStandardMaterial color={0xcccc00} />\r\n          </mesh>\r\n        </group>\r\n        {Array(MM)\r\n          .fill(null)\r\n          .map((value, index) => {\r\n            const radians = Convert.toRadians((360 / MM) * index);\r\n            return (\r\n              <group key={index} rotation={[0, 0, radians]}>\r\n                <mesh position={[1, 0, 0]}>\r\n                  <boxBufferGeometry\r\n                    args={[\r\n                      index % 5 ? 0.15 : 0.25,\r\n                      index % 5 ? 0.01 : 0.03,\r\n                      0.015,\r\n                    ]}\r\n                  />\r\n                  <meshStandardMaterial\r\n                    color={\r\n                      index === 0 ? 0x0000ff : index % 5 ? 0xffffff : 0xff0000\r\n                    }\r\n                    metalness={0.1}\r\n                    opacity={0.5}\r\n                    roughness={0.6}\r\n                    transparent={true}\r\n                  />\r\n                </mesh>\r\n              </group>\r\n            );\r\n          })}\r\n        <mesh castShadow={true} rotation={[Convert.toRadians(-90), 0, 0]}>\r\n          <cylinderBufferGeometry args={[0.1, 0.05, 0.1, 32]} />\r\n          <meshStandardMaterial />\r\n        </mesh>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\n\r\nexport default () => {\r\n  const lightRef = useRef();\r\n  const pos = [0.5, 0.5, 1];\r\n\r\n  return (\r\n    <>\r\n      <ambientLight intensity={0.1} />\r\n      <group position={pos}>\r\n        <directionalLight\r\n          castShadow={true}\r\n          color={0xffffff}\r\n          intensity={1}\r\n          ref={lightRef}\r\n        />\r\n        <mesh position={pos}>\r\n          <sphereBufferGeometry args={[0.01, 32, 32]} />\r\n          <meshMatcapMaterial />\r\n        </mesh>\r\n      </group>\r\n\r\n      <pointLight color={0xff6600} intensity={0.5} position={[0, 0, 0]} />\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { OrbitControls, Stats } from \"@react-three/drei\";\r\nimport { Bloom, EffectComposer } from \"@react-three/postprocessing\";\r\n// import io from \"socket.io-client\";\r\nimport {\r\n  Button,\r\n  Clock,\r\n  Cube,\r\n  Gauge,\r\n  GlTransmissionFormat,\r\n  Lighting,\r\n  Suzanne,\r\n  Tripod,\r\n} from \"App/components\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default () => {\r\n  // const port = 3001;\r\n  // const socket = io(`http://localhost:${port}`);\r\n\r\n  // socket.on(\"connect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"disconnect\", () => {\r\n  //   console.log(\"Socket connected: \", socket.connected);\r\n  // });\r\n\r\n  // socket.on(\"telemetry\", (message) => {\r\n  //   console.log(\"Message:\", message);\r\n  // });\r\n\r\n  return (\r\n    <Canvas invalidateFrameloop={false} shadowMap>\r\n      <group>\r\n        {true && (\r\n          <OrbitControls\r\n            enablePan={true}\r\n            enableRotate={true}\r\n            enableZoom={true}\r\n          />\r\n        )}\r\n        {false && <Stats />}\r\n        {false && <axesHelper />}\r\n        {false && <gridHelper args={[10, 10, \"red\", \"green\"]} />}\r\n      </group>\r\n      <EffectComposer>\r\n        <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />\r\n      </EffectComposer>\r\n      <Lighting />\r\n      {false && <Button />}\r\n      {true && <Clock />}\r\n      {false && <Cube />}\r\n      {false && <Cube position={[1, 1, 1]} rotation={[0.5, 0.5, 0.5]} />}\r\n      {false && <Gauge position={[0, 0, -1]} />}\r\n      {false && (\r\n        <Suspense fallback={null}>\r\n          <Suzanne />\r\n          <GlTransmissionFormat />\r\n        </Suspense>\r\n      )}\r\n      {false && <Tripod />}\r\n    </Canvas>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}